// Copyright 2022 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package dev.sigstore.trustroot.v1;

import "sigstore_common.proto";

option go_package = "github.com/sigstore/proto/trustroot/v1";
option java_package = "dev.sigstore.proto.trustroot.v1";
option java_multiple_files = true;
option java_outer_classname = "TrustRootProto";

// TransparencyLogInstance describes the data required from a
// transparency log, to successfully identify it and perform verification
// inclusion.
message TransparencyLogInstance {
        dev.sigstore.common.v1.LogId log_id = 1;
        string uri = 2;
        dev.sigstore.common.v1.PublicKey public_key = 3;
        // The time range is half-open and does not include the end
        // timestamp, i.e [valid_for.start, valid_for.end).
        dev.sigstore.common.v1.TimeRange valid_for = 4;
}

// CertificateAuthority enlists the information required to identify which
// CA to use and perform signature verification.
message CertificateAuthority {
        // The root certificate MUST be self-signed, and so the subject and
        // issuer are the same.
        dev.sigstore.common.v1.DistinguishedName subject = 1;
        string uri = 2;
        dev.sigstore.common.v1.X509CertificateChain cert_chain = 3;
        // The time the *entire* chain was valid. This is at max the
        // longest interval when *all* certificates in the chain where valid,
        // but it MAY be shorter.
        // The time range is half-open and does not include the end
        // timestamp, i.e [valid_for.start, valid_for.end).
        dev.sigstore.common.v1.TimeRange valid_for = 4;
}

// TrustedRoot describes the client's complete set of trusted entities.
// How the TrustedRoot is populated is not specified, but can be a
// combination of many sources such as TUF repositories, files on disk etc.
message TrustedRoot {
        // A set of trusted Rekor servers.
        repeated TransparencyLogInstance tlogs = 1;
        // A set of trusted certificate authorites, and any intermediate
        // certificates they provide.
        // If a CA is issuing multiple intermediate certificate, each
        // combination shall be represented as separate chain. I.e, a single
        // root cert may appear in multiple chains but with different
        // intermediate and/or leaf certificates.
        // The certificates are intended to be used for verifying artifact
        // signatures.
        repeated CertificateAuthority certificate_authorities = 2;
        // A set of public keys to trust for artifact signing.
        repeated dev.sigstore.common.v1.PublicKey public_keys = 3;
        // A set of trusted certificate transparency logs.
        repeated TransparencyLogInstance ctfes = 4;
        // A set of trusted timestamping authorities.
        repeated CertificateAuthority timestamp_authorities = 5;
}
