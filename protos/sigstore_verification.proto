// Copyright 2022 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package dev.sigstore.verification.v1;

import "sigstore_common.proto";
import "sigstore_trustroot.proto";
import "sigstore_bundle.proto";

option go_package = "github.com/sigstore/protobuf-specs/gen/pb-go/verification/v1";
option java_package = "dev.sigstore.proto.verification.v1";
option java_multiple_files = true;
option java_outer_classname = "VerificationProto";
option ruby_package = "Sigstore::Verification::V1";

// The identity of a X.509 Certificate signer.
message CertificateIdentity {
        // The X.509v3 issuer extension (OID 1.3.6.1.4.1.57264.1.1)
        string issuer = 1;
        dev.sigstore.common.v1.SubjectAlternativeName san = 2;
        // An unordered list of OIDs that must be verified.
        // All OID/values provided in this list MUST exactly match against
        // the values in the certificate for verification to be successful.
        repeated dev.sigstore.common.v1.ObjectIdentifierValuePair oids = 3;
}

message CertificateIdentities {
        repeated CertificateIdentity identities = 1;
}

message PublicKeyIdentities {
        repeated dev.sigstore.common.v1.PublicKey public_keys = 1;
}

// A light-weight set of options/policies for identifying trusted signers,
// used during verification of a single artifact.
message ArtifactVerificationOptions {
        message TlogOptions {
                // Number of transparency logs the entry must appear on.
                int32 threshold = 1;
                // Perform an online inclusion proof.
                bool perform_online_verification = 2;
                // Disable verification for transparency logs.
                bool disable = 3;
        }
        message CtlogOptions {
                // The number of ct transparency logs the certificate must
                // appear on.
                int32 threshold = 1;
                reserved 2; // Deprecated: Support for detached SCTs
                // Disable ct transparency log verification
                bool disable = 3;
        }
        message TimestampAuthorityOptions {
                // The number of signed timestamps that are expected.
                int32 threshold = 1;
                // Disable signed timestamp verification.
                bool disable = 2;
        }
        message TlogIntegratedTimestampOptions{
                // The number of integrated timestamps that are expected.
                int32 threshold = 1;
                // Disable integrated timestamp verification.
                bool disable = 2;
        }
        message ObserverTimestampOptions {
                // The number of external observers of the timestamp.
                // This is a union of RFC3161 signed timestamps, and
                // integrated timestamps from a transparency log, that
                // could include additional timestamp sources in the
                // future.
                int32 threshold = 1;
                // Disable observer timestamp verification.
                bool disable = 2;
        }

        // At least one identity MUST be provided. Providing zero identities
        // is an error. If at least one provided identity is found as a
        // signer, the verification is considered successful.
        oneof signers {
                CertificateIdentities certificate_identities = 1;
                // To simplify verification implementation, the logic for
                // bundle verification should be implemented as a
                // higher-order function, where one of argument should be an
                // interface over the set of trusted public keys, like this:
                // `Verify(bytes artifact, bytes signature, string key_id)`.
                // This way the caller is in full control of mapping the
                // identified (or hinted) key in the bundle to one of the
                // trusted keys, as this process is inherently application
                // specific.
                PublicKeyIdentities public_keys = 2;
        }
        // Optional options for artifact transparency log verification.
        // If none is provided, the default verification options are:
        // Threshold: 1
        // Online verification: false
        // Disable: false
        optional TlogOptions tlog_options = 3;
        // Optional options for certificate transparency log verification.
        // If none is provided, the default verification options are:
        // Threshold: 1
        // Disable: false
        optional CtlogOptions ctlog_options = 4;
        // Optional options for certificate signed timestamp verification.
        // If none is provided, the default verification options are:
        // Threshold: 0
        // Disable: true
        optional TimestampAuthorityOptions tsa_options = 5;
        // Optional options for integrated timestamp verification.
        // If none is provided, the default verification options are:
        // Threshold: 0
        // Disable: true
        optional TlogIntegratedTimestampOptions integrated_ts_options = 6;
        // Optional options for observed timestamp verification.
        // If none is provided, the default verification options are:
        // Threshold 1
        // Disable: false
        optional ObserverTimestampOptions observer_options = 7;
}

message Artifact {
        oneof data {
                // Location of the artifact
                string artifact_uri = 1;
                // The raw bytes of the artifact
                bytes artifact = 2;
                // Digest of the artifact. SHOULD NOT be used when verifying an
                // in-toto attestation as the subject digest cannot be
                // reconstructed. This option will not work with Ed25519
                // signatures, use Ed25519Ph or another algorithm instead.
                dev.sigstore.common.v1.HashOutput artifact_digest = 3;
        }
}

// Input captures all that is needed to call the bundle verification method,
// to verify a single artifact referenced by the bundle.
message Input {
        // The verification materials provided during a bundle verification.
        // The running process is usually preloaded with a "global"
        // dev.sisgtore.trustroot.TrustedRoot.v1 instance. Prior to
        // verifying an artifact (i.e a bundle), and/or based on current
        // policy, some selection is expected to happen, to filter out the
        // exact certificate authority to use, which transparency logs are
        // relevant etc. The result should b ecaptured in the
        // `artifact_trust_root`.
        dev.sigstore.trustroot.v1.TrustedRoot artifact_trust_root = 1;
        ArtifactVerificationOptions artifact_verification_options = 2;
        dev.sigstore.bundle.v1.Bundle bundle = 3;
        // If the bundle contains a message signature, the artifact must be
        // provided.
        optional Artifact artifact = 4;
}

// CertificateSummary contains verified metadata from the certificate
message CertificateSummary {
        // The issuer of the certificate
        string certificate_issuer = 1;

        // The Subject Alternative Name, or SAN, from the certificate
        string subject_alternative_name = 2;

        // The OIDC issuer. Should match `iss` claim of ID token or, in the case of
        // a federated login like Dex it should match the issuer URL of the
        // upstream issuer. The issuer is not set the extensions are invalid and
        // will fail to render.
        // OID 1.3.6.1.4.1.57264.1.8 and 1.3.6.1.4.1.57264.1.1 (Deprecated)
        string issuer = 3;

        // Deprecated
        // Triggering event of the Github Workflow. Matches the `event_name` claim of ID
        // tokens from Github Actions
        // OID 1.3.6.1.4.1.57264.1.2
        string githubWorkflowTrigger = 4;

        // Deprecated
        // SHA of git commit being built in Github Actions. Matches the `sha` claim of ID
        // tokens from Github Actions
        // OID 1.3.6.1.4.1.57264.1.3
        string githubWorkflowSHA = 5;

        // Deprecated
        // Name of Github Actions Workflow. Matches the `workflow` claim of the ID
        // tokens from Github Actions
        // OID 1.3.6.1.4.1.57264.1.4
        string githubWorkflowName = 6;

        // Deprecated
        // Repository of the Github Actions Workflow. Matches the `repository` claim of the ID
        // tokens from Github Actions
        // OID 1.3.6.1.4.1.57264.1.5
        string githubWorkflowRepository = 7;

        // Deprecated
        // Git Ref of the Github Actions Workflow. Matches the `ref` claim of the ID tokens
        // from Github Actions
        // OID 1.3.6.1.4.1.57264.1.6
        string githubWorkflowRef = 8;

        // Reference to specific build instructions that are responsible for signing.
        // OID 1.3.6.1.4.1.57264.1.9
        string buildSignerURI = 9;

        // Immutable reference to the specific version of the build instructions that is responsible for signing.
        // OID 1.3.6.1.4.1.57264.1.10
        string buildSignerDigest = 10;

        // Specifies whether the build took place in platform-hosted cloud infrastructure or customer/self-hosted infrastructure.
        // OID 1.3.6.1.4.1.57264.1.11
        string runnerEnvironment = 11;

        // Source repository URL that the build was based on.
        // OID 1.3.6.1.4.1.57264.1.12
        string sourceRepositoryURI = 12;

        // Immutable reference to a specific version of the source code that the build was based upon.
        // OID 1.3.6.1.4.1.57264.1.13
        string sourceRepositoryDigest = 13;

        // Source Repository Ref that the build run was based upon.
        // OID 1.3.6.1.4.1.57264.1.14
        string sourceRepositoryRef = 14;

        // Immutable identifier for the source repository the workflow was based upon.
        // OID 1.3.6.1.4.1.57264.1.15
        string sourceRepositoryIdentifier = 15;

        // Source repository owner URL of the owner of the source repository that the build was based on.
        // OID 1.3.6.1.4.1.57264.1.16
        string sourceRepositoryOwnerURI = 16;

        // Immutable identifier for the owner of the source repository that the workflow was based upon.
        // OID 1.3.6.1.4.1.57264.1.17
        string sourceRepositoryOwnerIdentifier = 17;

        // Build Config URL to the top-level/initiating build instructions.
        // OID 1.3.6.1.4.1.57264.1.18
        string buildConfigURI = 18;

        // Immutable reference to the specific version of the top-level/initiating build instructions.
        // OID 1.3.6.1.4.1.57264.1.19
        string buildConfigDigest = 19;

        // Event or action that initiated the build.
        // OID 1.3.6.1.4.1.57264.1.20
        string buildTrigger = 20;

        // Run Invocation URL to uniquely identify the build execution.
        // OID 1.3.6.1.4.1.57264.1.21
        string runInvocationURI = 21;

        // Source repository visibility at the time of signing the certificate.
        // OID 1.3.6.1.4.1.57264.1.22
        string sourceRepositoryVisibilityAtSigning = 22;
}

message SignatureResult {
        // If the bundle contains a public key, the public_key_id field will
        // contain the public key ID
        string public_key_id = 1;

        // If the bundle contains a certificate, the certificate field will
        // contain metadata about the certificate
        CertificateSummary certificate = 2;
}

message TimestampResult {
        // The type of timestamp verification; may be `Tlog`, `TimestampAuthority`, or `CurrentTime`
        string type = 1;

        // The URI of the timestamp provider; may contain the base URL of the
        // TSA or Tlog that was used to establish a timestamp
        string uri = 2;

        // The actual timestamp time that was verified
        google.protobuf.Timestamp timestamp = 3;
}

message UnverifiedTimestampResult {
        // Data about the timestamp that was unverified
        TimestampResult result = 1;

        // Reason or error text describing why this timestamp was not verified
        string reason = 2;
}

message UnverifiedData {
        repeated UnverifiedTimestampResult timestamps = 1;
}

// Result captures the result of the verification
message Result {
        // MUST be application/vnd.dev.sigstore.verificationresult+json;version=0.1
        string media_type = 1;

        // MUST be either "success" or "failure"
        string status = 2;

        // SHOULD contain an error message if status == "failure"
        string error = 3;

        // If the bundle contains a DSSE, this result shonuld contain the
        // deserialized and verified statement
        string statement = 3;

        // Data about the public key or certificate associated with the verified signature
        SignatureResult signature = 4;

        // Data about verified timestamps
        repeated TimestampResult verified_timestamps = 5;

        // Any data which was unable to be verified.
        UnverifiedData unverified_data = 6;
}
