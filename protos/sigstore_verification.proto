// Copyright 2022 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package dev.sigstore.verification.v1;

import "sigstore_common.proto";
import "sigstore_trustroot.proto";
import "sigstore_bundle.proto";

option go_package = "github.com/sigstore/proto/verification/v1";
option java_package = "dev.sigstore.proto.verification.v1";
option java_multiple_files = true;
option java_outer_classname = "VerificationProto";

// The identity of a signer.
message Identity {
        // The X.509v3 issuer extension (OID 1.3.6.1.4.1.57264.1.1)
        string issuer = 1;
        // A regular expression describing the expected value for the SAN.
        string subject_alternative_name = 2;
}

message TransparencyLogs {
        // The set of transparency logs to use during bundle verification.
        repeated dev.sigstore.trustroot.v1.TransparencyLogInstance instances = 1;
        // The minimim number of logs the entry must appear on.
        int32 threshold = 2;
        // Perform an online proof of inclusion.
        bool require_inclusion_proof = 3;
}

message TimestampAuthorities {
        // The set of trusted timestamp authorities
        repeated dev.sigstore.trustroot.v1.CertificateAuthority instances = 1;
        // The minimum number of valid countersignatues.
        int32 threshold = 2;
}

// The verification material provided during a bundle verification.
// The "instance" is usually preloaded with a "resolved"
// dev.sisgtore.trustroot.TrustedRoot.v1 instance. Prior to verifying an
// artifact (i.e a bundle) some selection is expected to happen, to filter
// out the exact authorities to use, which is captured in this message.
message Material {
        TransparencyLogs tlogs = 1;
        oneof signature_verification {
                dev.sigstore.trustroot.v1.CertificateAuthority certificate_authority = 2;
                dev.sigstore.common.v1.PublicKey public_key = 3;
        }
        TransparencyLogs ctfes = 4;
        TimestampAuthorities timestamp_authorities = 5;
}

// A light-weight set of options/policies for identifying trusted signers.
message Options {
        // At least one identity MUST be provided.
        repeated Identity signers = 1;
}

// Input captures all that is needed to call the bundle verification method.
message Input {
        Material verification_material = 1;
        Options verification_options = 2;
        dev.sigstore.bundle.v1.Bundle bundle = 3;
        // If the bundle contains a hashed record, this URI MUST identify
        // the location of the artifact.
        optional string artifact_uri = 4;
}
