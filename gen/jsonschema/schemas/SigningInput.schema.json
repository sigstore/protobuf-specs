{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/SigningInput",
    "definitions": {
        "SigningInput": {
            "properties": {
                "trustedRoot": {
                    "$ref": "#/definitions/dev.sigstore.trustroot.v1.TrustedRoot",
                    "additionalProperties": false
                },
                "signingOptions": {
                    "$ref": "#/definitions/dev.sigstore.signing.v1.SigningOptions",
                    "additionalProperties": false
                },
                "bundleContentOptions": {
                    "$ref": "#/definitions/dev.sigstore.signing.v1.BundleContentOptions",
                    "additionalProperties": false
                },
                "tsaOptions": {
                    "$ref": "#/definitions/dev.sigstore.signing.v1.TSAOptions",
                    "additionalProperties": false
                },
                "artifact": {
                    "$ref": "#/definitions/dev.sigstore.verification.v1.Artifact",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "artifact"
                    ]
                }
            ],
            "title": "Signing Input",
            "description": "Input captures all that is needed to call the signing method."
        },
        "dev.sigstore.common.v1.DistinguishedName": {
            "properties": {
                "organization": {
                    "type": "string"
                },
                "commonName": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Distinguished Name"
        },
        "dev.sigstore.common.v1.HashOutput": {
            "properties": {
                "algorithm": {
                    "enum": [
                        "HASH_ALGORITHM_UNSPECIFIED",
                        "SHA2_256",
                        "SHA2_384",
                        "SHA2_512",
                        "SHA3_256",
                        "SHA3_384"
                    ],
                    "type": "string",
                    "title": "This package defines commonly used message types within the Sigstore\n community.",
                    "description": "This package defines commonly used message types within the Sigstore community.  Only a subset of the secure hash standard algorithms are supported. See \u003chttps://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\u003e for more details. UNSPECIFIED SHOULD not be used, primary reason for inclusion is to force any proto JSON serialization to emit the used hash algorithm, as default option is to *omit* the default value of an enum (which is the first value, represented by '0'."
                },
                "digest": {
                    "type": "string",
                    "description": "This is the raw octets of the message digest as computed by the hash algorithm.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Hash Output",
            "description": "HashOutput captures a digest of a 'message' (generic octet sequence) and the corresponding hash algorithm used."
        },
        "dev.sigstore.common.v1.LogId": {
            "properties": {
                "keyId": {
                    "type": "string",
                    "description": "The unique identity of the log, represented by its public key.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Log Id",
            "description": "LogId captures the identity of a transparency log."
        },
        "dev.sigstore.common.v1.PublicKey": {
            "properties": {
                "rawBytes": {
                    "type": "string",
                    "description": "DER-encoded public key, encoding method is specified by the key_details attribute.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "keyDetails": {
                    "enum": [
                        "PUBLIC_KEY_DETAILS_UNSPECIFIED",
                        "PKCS1_RSA_PKCS1V5",
                        "PKCS1_RSA_PSS",
                        "PKIX_RSA_PKCS1V5",
                        "PKIX_RSA_PSS",
                        "PKIX_RSA_PKCS1V15_2048_SHA256",
                        "PKIX_RSA_PKCS1V15_3072_SHA256",
                        "PKIX_RSA_PKCS1V15_4096_SHA256",
                        "PKIX_RSA_PSS_2048_SHA256",
                        "PKIX_RSA_PSS_3072_SHA256",
                        "PKIX_RSA_PSS_4096_SHA256",
                        "PKIX_ECDSA_P256_HMAC_SHA_256",
                        "PKIX_ECDSA_P256_SHA_256",
                        "PKIX_ECDSA_P384_SHA_384",
                        "PKIX_ECDSA_P521_SHA_512",
                        "PKIX_ED25519",
                        "PKIX_ED25519_PH",
                        "LMS_SHA256",
                        "LMOTS_SHA256"
                    ],
                    "type": "string",
                    "title": "Public Key Details",
                    "description": "Details of a specific public key, capturing the the key encoding method, and signature algorithm. PublicKeyDetails captures the public key/hash algorithm combinations recommended in the Sigstore ecosystem. This is modelled as a linear set as we want to provide a small number of opinionated options instead of allowing every possible permutation. Any changes to this enum MUST be reflected in the algorithm registry. See: docs/algorithm-registry.md To avoid the possibility of contradicting formats such as PKCS1 with ED25519 the valid permutations are listed as a linear set instead of a cartesian set (i.e one combined variable instead of two, one for encoding and one for the signature algorithm)."
                },
                "validFor": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.TimeRange",
                    "additionalProperties": false,
                    "description": "Optional validity period for this key, *inclusive* of the endpoints."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "raw_bytes"
                    ]
                },
                {
                    "required": [
                        "valid_for"
                    ]
                }
            ],
            "title": "Public Key"
        },
        "dev.sigstore.common.v1.TimeRange": {
            "properties": {
                "start": {
                    "type": "string",
                    "format": "date-time"
                },
                "end": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "end"
                    ]
                }
            ],
            "title": "Time Range",
            "description": "The time range is closed and includes both the start and end times, (i.e., [start, end]). End is optional to be able to capture a period that has started but has no known end."
        },
        "dev.sigstore.common.v1.X509Certificate": {
            "properties": {
                "rawBytes": {
                    "type": "string",
                    "description": "DER-encoded X.509 certificate.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "X 509 Certificate"
        },
        "dev.sigstore.common.v1.X509CertificateChain": {
            "properties": {
                "certificates": {
                    "items": {
                        "$ref": "#/definitions/dev.sigstore.common.v1.X509Certificate"
                    },
                    "additionalProperties": false,
                    "type": "array",
                    "description": "One or more DER-encoded certificates. In some contexts (such as `VerificationMaterial.x509_certificate_chain`), this sequence has an imposed order. Unless explicitly specified, there is otherwise no guaranteed order."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "X 509 Certificate Chain",
            "description": "A collection of X.509 certificates. This \"chain\" can be used in multiple contexts, such as providing a root CA certificate within a TUF root of trust or multiple untrusted certificates for the purpose of chain building."
        },
        "dev.sigstore.signing.v1.BundleContentOptions": {
            "properties": {
                "messageSignature": {
                    "$ref": "#/definitions/dev.sigstore.signing.v1.BundleContentOptions.MessageSignature",
                    "additionalProperties": false
                },
                "dsseEnvelope": {
                    "$ref": "#/definitions/dev.sigstore.signing.v1.BundleContentOptions.DSSE",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "message_signature"
                    ]
                },
                {
                    "required": [
                        "dsse_envelope"
                    ]
                }
            ],
            "title": "Bundle Content Options"
        },
        "dev.sigstore.signing.v1.BundleContentOptions.DSSE": {
            "properties": {
                "payload": {
                    "type": "string",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "payloadType": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "DSSE"
        },
        "dev.sigstore.signing.v1.BundleContentOptions.MessageSignature": {
            "properties": {
                "hashAlgorithm": {
                    "enum": [
                        "HASH_ALGORITHM_UNSPECIFIED",
                        "SHA2_256",
                        "SHA2_384",
                        "SHA2_512",
                        "SHA3_256",
                        "SHA3_384"
                    ],
                    "type": "string",
                    "title": "This package defines commonly used message types within the Sigstore\n community.",
                    "description": "This package defines commonly used message types within the Sigstore community.  Only a subset of the secure hash standard algorithms are supported. See \u003chttps://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\u003e for more details. UNSPECIFIED SHOULD not be used, primary reason for inclusion is to force any proto JSON serialization to emit the used hash algorithm, as default option is to *omit* the default value of an enum (which is the first value, represented by '0'."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Message Signature"
        },
        "dev.sigstore.signing.v1.FulcioSigningMaterial": {
            "properties": {
                "identityToken": {
                    "type": "string",
                    "description": "The OIDC identity token to use for retrieving a signing certificate from fulcio."
                },
                "keyDetails": {
                    "enum": [
                        "PUBLIC_KEY_DETAILS_UNSPECIFIED",
                        "PKCS1_RSA_PKCS1V5",
                        "PKCS1_RSA_PSS",
                        "PKIX_RSA_PKCS1V5",
                        "PKIX_RSA_PSS",
                        "PKIX_RSA_PKCS1V15_2048_SHA256",
                        "PKIX_RSA_PKCS1V15_3072_SHA256",
                        "PKIX_RSA_PKCS1V15_4096_SHA256",
                        "PKIX_RSA_PSS_2048_SHA256",
                        "PKIX_RSA_PSS_3072_SHA256",
                        "PKIX_RSA_PSS_4096_SHA256",
                        "PKIX_ECDSA_P256_HMAC_SHA_256",
                        "PKIX_ECDSA_P256_SHA_256",
                        "PKIX_ECDSA_P384_SHA_384",
                        "PKIX_ECDSA_P521_SHA_512",
                        "PKIX_ED25519",
                        "PKIX_ED25519_PH",
                        "LMS_SHA256",
                        "LMOTS_SHA256"
                    ],
                    "type": "string",
                    "title": "Public Key Details",
                    "description": "Details of a specific public key, capturing the the key encoding method, and signature algorithm. PublicKeyDetails captures the public key/hash algorithm combinations recommended in the Sigstore ecosystem. This is modelled as a linear set as we want to provide a small number of opinionated options instead of allowing every possible permutation. Any changes to this enum MUST be reflected in the algorithm registry. See: docs/algorithm-registry.md To avoid the possibility of contradicting formats such as PKCS1 with ED25519 the valid permutations are listed as a linear set instead of a cartesian set (i.e one combined variable instead of two, one for encoding and one for the signature algorithm)."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "key_details"
                    ]
                }
            ],
            "title": "Fulcio Signing Material"
        },
        "dev.sigstore.signing.v1.SigningOptions": {
            "properties": {
                "fulcioSigningMaterial": {
                    "$ref": "#/definitions/dev.sigstore.signing.v1.FulcioSigningMaterial",
                    "additionalProperties": false,
                    "description": "The OIDC identity token to use for retrieving a signing certificate from fulcio."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "fulcio_signing_material"
                    ]
                }
            ],
            "title": "Signing Options"
        },
        "dev.sigstore.signing.v1.TSAOptions": {
            "additionalProperties": false,
            "type": "object",
            "title": "TSA Options"
        },
        "dev.sigstore.trustroot.v1.CertificateAuthority": {
            "properties": {
                "subject": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.DistinguishedName",
                    "additionalProperties": false,
                    "description": "The root certificate MUST be self-signed, and so the subject and issuer are the same."
                },
                "uri": {
                    "type": "string",
                    "description": "The URI identifies the certificate authority. It is RECOMMENDED that the URI is the base URL for the certificate authority, that can be provided to any SDK/client provided by the certificate authority to interact with the certificate authority."
                },
                "certChain": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.X509CertificateChain",
                    "additionalProperties": false,
                    "description": "The certificate chain for this CA. The last certificate in the chain MUST be the trust anchor. The trust anchor MAY be a self-signed root CA certificate or MAY be an intermediate CA certificate."
                },
                "validFor": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.TimeRange",
                    "additionalProperties": false,
                    "description": "The time the *entire* chain was valid. This is at max the longest interval when *all* certificates in the chain were valid, but it MAY be shorter. Clients MUST check timestamps against *both* the `valid_for` time range *and* the entire certificate chain. The TimeRange should be considered valid *inclusive* of the endpoints."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Certificate Authority",
            "description": "CertificateAuthority enlists the information required to identify which CA to use and perform signature verification."
        },
        "dev.sigstore.trustroot.v1.TransparencyLogInstance": {
            "properties": {
                "baseUrl": {
                    "type": "string",
                    "description": "The base URL at which can be used to URLs for the client."
                },
                "hashAlgorithm": {
                    "enum": [
                        "HASH_ALGORITHM_UNSPECIFIED",
                        "SHA2_256",
                        "SHA2_384",
                        "SHA2_512",
                        "SHA3_256",
                        "SHA3_384"
                    ],
                    "type": "string",
                    "title": "This package defines commonly used message types within the Sigstore\n community.",
                    "description": "This package defines commonly used message types within the Sigstore community.  Only a subset of the secure hash standard algorithms are supported. See \u003chttps://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\u003e for more details. UNSPECIFIED SHOULD not be used, primary reason for inclusion is to force any proto JSON serialization to emit the used hash algorithm, as default option is to *omit* the default value of an enum (which is the first value, represented by '0'."
                },
                "publicKey": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.PublicKey",
                    "additionalProperties": false,
                    "description": "The public key used to verify signatures generated by the log. This attribute contains the signature algorithm used by the log."
                },
                "logId": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.LogId",
                    "additionalProperties": false,
                    "description": "The unique identifier for this transparency log. Represented as the SHA-256 hash of the log's public key, calculated over the DER encoding of the key represented as SubjectPublicKeyInfo. See https://www.rfc-editor.org/rfc/rfc6962#section-3.2"
                },
                "checkpointKeyId": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.LogId",
                    "additionalProperties": false,
                    "description": "The checkpoint key identifier for the log used in a checkpoint. Optional, not provided for logs that do not generate checkpoints. For logs that do generate checkpoints, if not set, assume log_id equals checkpoint_key_id. Follows the specification described here for ECDSA and Ed25519 signatures: https://github.com/C2SP/C2SP/blob/main/signed-note.md#signatures For RSA signatures, the key ID will match the ECDSA format, the hashed DER-encoded SPKI public key. Publicly witnessed logs MUST NOT use RSA-signed checkpoints, since witnesses do not support RSA signatures. This is provided for convenience. Clients can also calculate the checkpoint key ID given the log's public key. SHOULD be set for logs generating Ed25519 signatures. SHOULD be 4 bytes long, as a truncated hash."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Transparency Log Instance",
            "description": "TransparencyLogInstance describes the immutable parameters from a transparency log. See https://www.rfc-editor.org/rfc/rfc9162.html#name-log-parameters for more details. The included parameters are the minimal set required to identify a log, and verify an inclusion proof/promise."
        },
        "dev.sigstore.trustroot.v1.TrustedRoot": {
            "properties": {
                "mediaType": {
                    "type": "string",
                    "description": "MUST be application/vnd.dev.sigstore.trustedroot.v0.1+json when encoded as JSON. Clients MUST be able to process and parse content with the media type defined in the old format: application/vnd.dev.sigstore.trustedroot+json;version=0.1"
                },
                "tlogs": {
                    "items": {
                        "$ref": "#/definitions/dev.sigstore.trustroot.v1.TransparencyLogInstance"
                    },
                    "additionalProperties": false,
                    "type": "array",
                    "description": "A set of trusted Rekor servers."
                },
                "certificateAuthorities": {
                    "items": {
                        "$ref": "#/definitions/dev.sigstore.trustroot.v1.CertificateAuthority"
                    },
                    "additionalProperties": false,
                    "type": "array",
                    "description": "A set of trusted certificate authorities (e.g Fulcio), and any intermediate certificates they provide. If a CA is issuing multiple intermediate certificate, each combination shall be represented as separate chain. I.e, a single root cert may appear in multiple chains but with different intermediate and/or leaf certificates. The certificates are intended to be used for verifying artifact signatures."
                },
                "ctlogs": {
                    "items": {
                        "$ref": "#/definitions/dev.sigstore.trustroot.v1.TransparencyLogInstance"
                    },
                    "additionalProperties": false,
                    "type": "array",
                    "description": "A set of trusted certificate transparency logs."
                },
                "timestampAuthorities": {
                    "items": {
                        "$ref": "#/definitions/dev.sigstore.trustroot.v1.CertificateAuthority"
                    },
                    "additionalProperties": false,
                    "type": "array",
                    "description": "A set of trusted timestamping authorities."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Trusted Root",
            "description": "TrustedRoot describes the client's complete set of trusted entities. How the TrustedRoot is populated is not specified, but can be a combination of many sources such as TUF repositories, files on disk etc. The TrustedRoot is not meant to be used for any artifact verification, only to capture the complete/global set of trusted verification materials. When verifying an artifact, based on the artifact and policies, a selection of keys/authorities are expected to be extracted and provided to the verification function. This way the set of keys/authorities can be kept to a minimal set by the policy to gain better control over what signatures that are allowed. The embedded transparency logs, CT logs, CAs and TSAs MUST include any previously used instance -- otherwise signatures made in the past cannot be verified. All the listed instances SHOULD be sorted by the 'valid_for' in ascending order, that is, the oldest instance first. Only the last instance is allowed to have their 'end' timestamp unset. All previous instances MUST have a closed interval of validity. The last instance MAY have a closed interval. Clients MUST accept instances that overlaps in time, if not clients may experience problems during rotations of verification materials. To be able to manage planned rotations of either transparency logs or certificate authorities, clienst MUST accept lists of instances where the last instance have a 'valid_for' that belongs to the future. This should not be a problem as clients SHOULD first seek the trust root for a suitable instance before creating a per artifact trust root (that is, a sub-set of the complete trust root) that is used for verification."
        },
        "dev.sigstore.verification.v1.Artifact": {
            "properties": {
                "artifactUri": {
                    "type": "string",
                    "description": "Location of the artifact"
                },
                "artifact": {
                    "type": "string",
                    "description": "The raw bytes of the artifact",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "artifactDigest": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.HashOutput",
                    "additionalProperties": false,
                    "description": "Digest of the artifact"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "artifact_uri"
                    ]
                },
                {
                    "required": [
                        "artifact"
                    ]
                },
                {
                    "required": [
                        "artifact_digest"
                    ]
                }
            ],
            "title": "Artifact"
        }
    }
}