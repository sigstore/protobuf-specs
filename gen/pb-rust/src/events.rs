// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `events.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct CloudEvent {
    // message fields
    pub id: ::std::string::String,
    pub source: ::std::string::String,
    pub spec_version: ::std::string::String,
    pub field_type: ::std::string::String,
    pub attributes: ::std::collections::HashMap<::std::string::String, CloudEvent_CloudEventAttributeValue>,
    // message oneof groups
    pub data: ::std::option::Option<CloudEvent_oneof_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CloudEvent {
    fn default() -> &'a CloudEvent {
        <CloudEvent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CloudEvent_oneof_data {
    binary_data(::std::vec::Vec<u8>),
    text_data(::std::string::String),
    proto_data(::protobuf::well_known_types::Any),
}

impl CloudEvent {
    pub fn new() -> CloudEvent {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string source = 2;


    pub fn get_source(&self) -> &str {
        &self.source
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source, ::std::string::String::new())
    }

    // string spec_version = 3;


    pub fn get_spec_version(&self) -> &str {
        &self.spec_version
    }
    pub fn clear_spec_version(&mut self) {
        self.spec_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_spec_version(&mut self, v: ::std::string::String) {
        self.spec_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spec_version(&mut self) -> &mut ::std::string::String {
        &mut self.spec_version
    }

    // Take field
    pub fn take_spec_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spec_version, ::std::string::String::new())
    }

    // string type = 4;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // repeated .dev.sigstore.events.v1.CloudEvent.AttributesEntry attributes = 5;


    pub fn get_attributes(&self) -> &::std::collections::HashMap<::std::string::String, CloudEvent_CloudEventAttributeValue> {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::std::collections::HashMap<::std::string::String, CloudEvent_CloudEventAttributeValue>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, CloudEvent_CloudEventAttributeValue> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::std::collections::HashMap<::std::string::String, CloudEvent_CloudEventAttributeValue> {
        ::std::mem::replace(&mut self.attributes, ::std::collections::HashMap::new())
    }

    // bytes binary_data = 6;


    pub fn get_binary_data(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(CloudEvent_oneof_data::binary_data(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_binary_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_binary_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(CloudEvent_oneof_data::binary_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_binary_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(CloudEvent_oneof_data::binary_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_binary_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(CloudEvent_oneof_data::binary_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(CloudEvent_oneof_data::binary_data(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(CloudEvent_oneof_data::binary_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_binary_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_binary_data() {
            match self.data.take() {
                ::std::option::Option::Some(CloudEvent_oneof_data::binary_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // string text_data = 7;


    pub fn get_text_data(&self) -> &str {
        match self.data {
            ::std::option::Option::Some(CloudEvent_oneof_data::text_data(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_text_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_text_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(CloudEvent_oneof_data::text_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text_data(&mut self, v: ::std::string::String) {
        self.data = ::std::option::Option::Some(CloudEvent_oneof_data::text_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text_data(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(CloudEvent_oneof_data::text_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(CloudEvent_oneof_data::text_data(::std::string::String::new()));
        }
        match self.data {
            ::std::option::Option::Some(CloudEvent_oneof_data::text_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text_data(&mut self) -> ::std::string::String {
        if self.has_text_data() {
            match self.data.take() {
                ::std::option::Option::Some(CloudEvent_oneof_data::text_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.protobuf.Any proto_data = 8;


    pub fn get_proto_data(&self) -> &::protobuf::well_known_types::Any {
        match self.data {
            ::std::option::Option::Some(CloudEvent_oneof_data::proto_data(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_proto_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_proto_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(CloudEvent_oneof_data::proto_data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proto_data(&mut self, v: ::protobuf::well_known_types::Any) {
        self.data = ::std::option::Option::Some(CloudEvent_oneof_data::proto_data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proto_data(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(CloudEvent_oneof_data::proto_data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(CloudEvent_oneof_data::proto_data(::protobuf::well_known_types::Any::new()));
        }
        match self.data {
            ::std::option::Option::Some(CloudEvent_oneof_data::proto_data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proto_data(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_proto_data() {
            match self.data.take() {
                ::std::option::Option::Some(CloudEvent_oneof_data::proto_data(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for CloudEvent {
    fn is_initialized(&self) -> bool {
        if let Some(CloudEvent_oneof_data::proto_data(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spec_version)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<CloudEvent_CloudEventAttributeValue>>(wire_type, is, &mut self.attributes)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(CloudEvent_oneof_data::binary_data(is.read_bytes()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(CloudEvent_oneof_data::text_data(is.read_string()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(CloudEvent_oneof_data::proto_data(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source);
        }
        if !self.spec_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.spec_version);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.field_type);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<CloudEvent_CloudEventAttributeValue>>(5, &self.attributes);
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &CloudEvent_oneof_data::binary_data(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(6, &v);
                },
                &CloudEvent_oneof_data::text_data(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
                &CloudEvent_oneof_data::proto_data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.source.is_empty() {
            os.write_string(2, &self.source)?;
        }
        if !self.spec_version.is_empty() {
            os.write_string(3, &self.spec_version)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(4, &self.field_type)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<CloudEvent_CloudEventAttributeValue>>(5, &self.attributes, os)?;
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &CloudEvent_oneof_data::binary_data(ref v) => {
                    os.write_bytes(6, v)?;
                },
                &CloudEvent_oneof_data::text_data(ref v) => {
                    os.write_string(7, v)?;
                },
                &CloudEvent_oneof_data::proto_data(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloudEvent {
        CloudEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &CloudEvent| { &m.id },
                |m: &mut CloudEvent| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source",
                |m: &CloudEvent| { &m.source },
                |m: &mut CloudEvent| { &mut m.source },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "spec_version",
                |m: &CloudEvent| { &m.spec_version },
                |m: &mut CloudEvent| { &mut m.spec_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &CloudEvent| { &m.field_type },
                |m: &mut CloudEvent| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<CloudEvent_CloudEventAttributeValue>>(
                "attributes",
                |m: &CloudEvent| { &m.attributes },
                |m: &mut CloudEvent| { &mut m.attributes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "binary_data",
                CloudEvent::has_binary_data,
                CloudEvent::get_binary_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "text_data",
                CloudEvent::has_text_data,
                CloudEvent::get_text_data,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "proto_data",
                CloudEvent::has_proto_data,
                CloudEvent::get_proto_data,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CloudEvent>(
                "CloudEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CloudEvent {
        static instance: ::protobuf::rt::LazyV2<CloudEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CloudEvent::new)
    }
}

impl ::protobuf::Clear for CloudEvent {
    fn clear(&mut self) {
        self.id.clear();
        self.source.clear();
        self.spec_version.clear();
        self.field_type.clear();
        self.attributes.clear();
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloudEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloudEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloudEvent_CloudEventAttributeValue {
    // message oneof groups
    pub attr: ::std::option::Option<CloudEvent_CloudEventAttributeValue_oneof_attr>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CloudEvent_CloudEventAttributeValue {
    fn default() -> &'a CloudEvent_CloudEventAttributeValue {
        <CloudEvent_CloudEventAttributeValue as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CloudEvent_CloudEventAttributeValue_oneof_attr {
    ce_boolean(bool),
    ce_integer(i32),
    ce_string(::std::string::String),
    ce_bytes(::std::vec::Vec<u8>),
    ce_uri(::std::string::String),
    ce_uri_ref(::std::string::String),
    ce_timestamp(::protobuf::well_known_types::Timestamp),
}

impl CloudEvent_CloudEventAttributeValue {
    pub fn new() -> CloudEvent_CloudEventAttributeValue {
        ::std::default::Default::default()
    }

    // bool ce_boolean = 1;


    pub fn get_ce_boolean(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_boolean(v)) => v,
            _ => false,
        }
    }
    pub fn clear_ce_boolean(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_boolean(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_boolean(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_boolean(&mut self, v: bool) {
        self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_boolean(v))
    }

    // int32 ce_integer = 2;


    pub fn get_ce_integer(&self) -> i32 {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_integer(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_ce_integer(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_integer(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_integer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_integer(&mut self, v: i32) {
        self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_integer(v))
    }

    // string ce_string = 3;


    pub fn get_ce_string(&self) -> &str {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_ce_string(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_string(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_string(&mut self, v: ::std::string::String) {
        self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_string(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(::std::string::String::new()));
        }
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_string(&mut self) -> ::std::string::String {
        if self.has_ce_string() {
            match self.attr.take() {
                ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes ce_bytes = 4;


    pub fn get_ce_bytes(&self) -> &[u8] {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_ce_bytes(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_bytes(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(::std::vec::Vec::new()));
        }
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_bytes(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_ce_bytes() {
            match self.attr.take() {
                ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // string ce_uri = 5;


    pub fn get_ce_uri(&self) -> &str {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_ce_uri(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_uri(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_uri(&mut self, v: ::std::string::String) {
        self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_uri(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(::std::string::String::new()));
        }
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_uri(&mut self) -> ::std::string::String {
        if self.has_ce_uri() {
            match self.attr.take() {
                ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string ce_uri_ref = 6;


    pub fn get_ce_uri_ref(&self) -> &str {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_ce_uri_ref(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_uri_ref(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_uri_ref(&mut self, v: ::std::string::String) {
        self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_uri_ref(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(::std::string::String::new()));
        }
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_uri_ref(&mut self) -> ::std::string::String {
        if self.has_ce_uri_ref() {
            match self.attr.take() {
                ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.protobuf.Timestamp ce_timestamp = 7;


    pub fn get_ce_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(ref v)) => v,
            _ => <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ce_timestamp(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_timestamp(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if let ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(::protobuf::well_known_types::Timestamp::new()));
        }
        match self.attr {
            ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        if self.has_ce_timestamp() {
            match self.attr.take() {
                ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Timestamp::new()
        }
    }
}

impl ::protobuf::Message for CloudEvent_CloudEventAttributeValue {
    fn is_initialized(&self) -> bool {
        if let Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(ref v)) = self.attr {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_boolean(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_integer(is.read_int32()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(is.read_bytes()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(is.read_string()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.attr = ::std::option::Option::Some(CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.attr {
            match v {
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_boolean(v) => {
                    my_size += 2;
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_integer(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.attr {
            match v {
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_boolean(v) => {
                    os.write_bool(1, v)?;
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_integer(v) => {
                    os.write_int32(2, v)?;
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_string(ref v) => {
                    os.write_string(3, v)?;
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_bytes(ref v) => {
                    os.write_bytes(4, v)?;
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri(ref v) => {
                    os.write_string(5, v)?;
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_uri_ref(ref v) => {
                    os.write_string(6, v)?;
                },
                &CloudEvent_CloudEventAttributeValue_oneof_attr::ce_timestamp(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloudEvent_CloudEventAttributeValue {
        CloudEvent_CloudEventAttributeValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "ce_boolean",
                CloudEvent_CloudEventAttributeValue::has_ce_boolean,
                CloudEvent_CloudEventAttributeValue::get_ce_boolean,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "ce_integer",
                CloudEvent_CloudEventAttributeValue::has_ce_integer,
                CloudEvent_CloudEventAttributeValue::get_ce_integer,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "ce_string",
                CloudEvent_CloudEventAttributeValue::has_ce_string,
                CloudEvent_CloudEventAttributeValue::get_ce_string,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "ce_bytes",
                CloudEvent_CloudEventAttributeValue::has_ce_bytes,
                CloudEvent_CloudEventAttributeValue::get_ce_bytes,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "ce_uri",
                CloudEvent_CloudEventAttributeValue::has_ce_uri,
                CloudEvent_CloudEventAttributeValue::get_ce_uri,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "ce_uri_ref",
                CloudEvent_CloudEventAttributeValue::has_ce_uri_ref,
                CloudEvent_CloudEventAttributeValue::get_ce_uri_ref,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Timestamp>(
                "ce_timestamp",
                CloudEvent_CloudEventAttributeValue::has_ce_timestamp,
                CloudEvent_CloudEventAttributeValue::get_ce_timestamp,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CloudEvent_CloudEventAttributeValue>(
                "CloudEvent.CloudEventAttributeValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CloudEvent_CloudEventAttributeValue {
        static instance: ::protobuf::rt::LazyV2<CloudEvent_CloudEventAttributeValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CloudEvent_CloudEventAttributeValue::new)
    }
}

impl ::protobuf::Clear for CloudEvent_CloudEventAttributeValue {
    fn clear(&mut self) {
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloudEvent_CloudEventAttributeValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloudEvent_CloudEventAttributeValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloudEventBatch {
    // message fields
    pub events: ::protobuf::RepeatedField<CloudEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CloudEventBatch {
    fn default() -> &'a CloudEventBatch {
        <CloudEventBatch as ::protobuf::Message>::default_instance()
    }
}

impl CloudEventBatch {
    pub fn new() -> CloudEventBatch {
        ::std::default::Default::default()
    }

    // repeated .dev.sigstore.events.v1.CloudEvent events = 1;


    pub fn get_events(&self) -> &[CloudEvent] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<CloudEvent>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<CloudEvent> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<CloudEvent> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CloudEventBatch {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.events {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloudEventBatch {
        CloudEventBatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CloudEvent>>(
                "events",
                |m: &CloudEventBatch| { &m.events },
                |m: &mut CloudEventBatch| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CloudEventBatch>(
                "CloudEventBatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CloudEventBatch {
        static instance: ::protobuf::rt::LazyV2<CloudEventBatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CloudEventBatch::new)
    }
}

impl ::protobuf::Clear for CloudEventBatch {
    fn clear(&mut self) {
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloudEventBatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloudEventBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cevents.proto\x12\x16dev.sigstore.events.v1\x1a\x19google/protobuf/\
    any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xd9\x05\n\nCloudEvent\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x16\n\x06source\x18\x02\
    \x20\x01(\tR\x06source\x12!\n\x0cspec_version\x18\x03\x20\x01(\tR\x0bspe\
    cVersion\x12\x12\n\x04type\x18\x04\x20\x01(\tR\x04type\x12R\n\nattribute\
    s\x18\x05\x20\x03(\x0b22.dev.sigstore.events.v1.CloudEvent.AttributesEnt\
    ryR\nattributes\x12!\n\x0bbinary_data\x18\x06\x20\x01(\x0cH\0R\nbinaryDa\
    ta\x12\x1d\n\ttext_data\x18\x07\x20\x01(\tH\0R\x08textData\x125\n\nproto\
    _data\x18\x08\x20\x01(\x0b2\x14.google.protobuf.AnyH\0R\tprotoData\x1az\
    \n\x0fAttributesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12Q\n\
    \x05value\x18\x02\x20\x01(\x0b2;.dev.sigstore.events.v1.CloudEvent.Cloud\
    EventAttributeValueR\x05value:\x028\x01\x1a\x9a\x02\n\x18CloudEventAttri\
    buteValue\x12\x1f\n\nce_boolean\x18\x01\x20\x01(\x08H\0R\tceBoolean\x12\
    \x1f\n\nce_integer\x18\x02\x20\x01(\x05H\0R\tceInteger\x12\x1d\n\tce_str\
    ing\x18\x03\x20\x01(\tH\0R\x08ceString\x12\x1b\n\x08ce_bytes\x18\x04\x20\
    \x01(\x0cH\0R\x07ceBytes\x12\x17\n\x06ce_uri\x18\x05\x20\x01(\tH\0R\x05c\
    eUri\x12\x1e\n\nce_uri_ref\x18\x06\x20\x01(\tH\0R\x08ceUriRef\x12?\n\x0c\
    ce_timestamp\x18\x07\x20\x01(\x0b2\x1a.google.protobuf.TimestampH\0R\x0b\
    ceTimestampB\x06\n\x04attrB\x06\n\x04data\"M\n\x0fCloudEventBatch\x12:\n\
    \x06events\x18\x01\x20\x03(\x0b2\".dev.sigstore.events.v1.CloudEventR\
    \x06eventsBX\n\x1cdev.sigstore.proto.events.v1P\x01Z6github.com/sigstore\
    /protobuf-specs/gen/pb-go/events/v1b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
