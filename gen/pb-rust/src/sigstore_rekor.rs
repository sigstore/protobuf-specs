// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `sigstore_rekor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct KindVersion {
    // message fields
    pub kind: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KindVersion {
    fn default() -> &'a KindVersion {
        <KindVersion as ::protobuf::Message>::default_instance()
    }
}

impl KindVersion {
    pub fn new() -> KindVersion {
        ::std::default::Default::default()
    }

    // string kind = 1;


    pub fn get_kind(&self) -> &str {
        &self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        &mut self.kind
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kind, ::std::string::String::new())
    }

    // string version = 2;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for KindVersion {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kind)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.kind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kind);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.kind.is_empty() {
            os.write_string(1, &self.kind)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KindVersion {
        KindVersion::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "kind",
                |m: &KindVersion| { &m.kind },
                |m: &mut KindVersion| { &mut m.kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &KindVersion| { &m.version },
                |m: &mut KindVersion| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KindVersion>(
                "KindVersion",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KindVersion {
        static instance: ::protobuf::rt::LazyV2<KindVersion> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KindVersion::new)
    }
}

impl ::protobuf::Clear for KindVersion {
    fn clear(&mut self) {
        self.kind.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KindVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KindVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Checkpoint {
    // message fields
    pub envelope: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Checkpoint {
    fn default() -> &'a Checkpoint {
        <Checkpoint as ::protobuf::Message>::default_instance()
    }
}

impl Checkpoint {
    pub fn new() -> Checkpoint {
        ::std::default::Default::default()
    }

    // string envelope = 1;


    pub fn get_envelope(&self) -> &str {
        &self.envelope
    }
    pub fn clear_envelope(&mut self) {
        self.envelope.clear();
    }

    // Param is passed by value, moved
    pub fn set_envelope(&mut self, v: ::std::string::String) {
        self.envelope = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_envelope(&mut self) -> &mut ::std::string::String {
        &mut self.envelope
    }

    // Take field
    pub fn take_envelope(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.envelope, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Checkpoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.envelope)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.envelope.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.envelope);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.envelope.is_empty() {
            os.write_string(1, &self.envelope)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Checkpoint {
        Checkpoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "envelope",
                |m: &Checkpoint| { &m.envelope },
                |m: &mut Checkpoint| { &mut m.envelope },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Checkpoint>(
                "Checkpoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Checkpoint {
        static instance: ::protobuf::rt::LazyV2<Checkpoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Checkpoint::new)
    }
}

impl ::protobuf::Clear for Checkpoint {
    fn clear(&mut self) {
        self.envelope.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Checkpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Checkpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InclusionProof {
    // message fields
    pub log_index: i64,
    pub root_hash: ::std::vec::Vec<u8>,
    pub tree_size: i64,
    pub hashes: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub checkpoint: ::protobuf::SingularPtrField<Checkpoint>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InclusionProof {
    fn default() -> &'a InclusionProof {
        <InclusionProof as ::protobuf::Message>::default_instance()
    }
}

impl InclusionProof {
    pub fn new() -> InclusionProof {
        ::std::default::Default::default()
    }

    // int64 log_index = 1;


    pub fn get_log_index(&self) -> i64 {
        self.log_index
    }
    pub fn clear_log_index(&mut self) {
        self.log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_log_index(&mut self, v: i64) {
        self.log_index = v;
    }

    // bytes root_hash = 2;


    pub fn get_root_hash(&self) -> &[u8] {
        &self.root_hash
    }
    pub fn clear_root_hash(&mut self) {
        self.root_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_root_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.root_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.root_hash
    }

    // Take field
    pub fn take_root_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.root_hash, ::std::vec::Vec::new())
    }

    // int64 tree_size = 3;


    pub fn get_tree_size(&self) -> i64 {
        self.tree_size
    }
    pub fn clear_tree_size(&mut self) {
        self.tree_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_tree_size(&mut self, v: i64) {
        self.tree_size = v;
    }

    // repeated bytes hashes = 4;


    pub fn get_hashes(&self) -> &[::std::vec::Vec<u8>] {
        &self.hashes
    }
    pub fn clear_hashes(&mut self) {
        self.hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_hashes(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hashes(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.hashes
    }

    // Take field
    pub fn take_hashes(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.hashes, ::protobuf::RepeatedField::new())
    }

    // .dev.sigstore.rekor.v1.Checkpoint checkpoint = 5;


    pub fn get_checkpoint(&self) -> &Checkpoint {
        self.checkpoint.as_ref().unwrap_or_else(|| <Checkpoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_checkpoint(&mut self) {
        self.checkpoint.clear();
    }

    pub fn has_checkpoint(&self) -> bool {
        self.checkpoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_checkpoint(&mut self, v: Checkpoint) {
        self.checkpoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checkpoint(&mut self) -> &mut Checkpoint {
        if self.checkpoint.is_none() {
            self.checkpoint.set_default();
        }
        self.checkpoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_checkpoint(&mut self) -> Checkpoint {
        self.checkpoint.take().unwrap_or_else(|| Checkpoint::new())
    }
}

impl ::protobuf::Message for InclusionProof {
    fn is_initialized(&self) -> bool {
        for v in &self.checkpoint {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.log_index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.root_hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tree_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.hashes)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.checkpoint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.log_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.root_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.root_hash);
        }
        if self.tree_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.tree_size, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.hashes {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        if let Some(ref v) = self.checkpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.log_index != 0 {
            os.write_int64(1, self.log_index)?;
        }
        if !self.root_hash.is_empty() {
            os.write_bytes(2, &self.root_hash)?;
        }
        if self.tree_size != 0 {
            os.write_int64(3, self.tree_size)?;
        }
        for v in &self.hashes {
            os.write_bytes(4, &v)?;
        };
        if let Some(ref v) = self.checkpoint.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InclusionProof {
        InclusionProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "log_index",
                |m: &InclusionProof| { &m.log_index },
                |m: &mut InclusionProof| { &mut m.log_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "root_hash",
                |m: &InclusionProof| { &m.root_hash },
                |m: &mut InclusionProof| { &mut m.root_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "tree_size",
                |m: &InclusionProof| { &m.tree_size },
                |m: &mut InclusionProof| { &mut m.tree_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hashes",
                |m: &InclusionProof| { &m.hashes },
                |m: &mut InclusionProof| { &mut m.hashes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Checkpoint>>(
                "checkpoint",
                |m: &InclusionProof| { &m.checkpoint },
                |m: &mut InclusionProof| { &mut m.checkpoint },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InclusionProof>(
                "InclusionProof",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InclusionProof {
        static instance: ::protobuf::rt::LazyV2<InclusionProof> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InclusionProof::new)
    }
}

impl ::protobuf::Clear for InclusionProof {
    fn clear(&mut self) {
        self.log_index = 0;
        self.root_hash.clear();
        self.tree_size = 0;
        self.hashes.clear();
        self.checkpoint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InclusionProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InclusionProof {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InclusionPromise {
    // message fields
    pub signed_entry_timestamp: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InclusionPromise {
    fn default() -> &'a InclusionPromise {
        <InclusionPromise as ::protobuf::Message>::default_instance()
    }
}

impl InclusionPromise {
    pub fn new() -> InclusionPromise {
        ::std::default::Default::default()
    }

    // bytes signed_entry_timestamp = 1;


    pub fn get_signed_entry_timestamp(&self) -> &[u8] {
        &self.signed_entry_timestamp
    }
    pub fn clear_signed_entry_timestamp(&mut self) {
        self.signed_entry_timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_signed_entry_timestamp(&mut self, v: ::std::vec::Vec<u8>) {
        self.signed_entry_timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_entry_timestamp(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signed_entry_timestamp
    }

    // Take field
    pub fn take_signed_entry_timestamp(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signed_entry_timestamp, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for InclusionPromise {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signed_entry_timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signed_entry_timestamp.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signed_entry_timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.signed_entry_timestamp.is_empty() {
            os.write_bytes(1, &self.signed_entry_timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InclusionPromise {
        InclusionPromise::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signed_entry_timestamp",
                |m: &InclusionPromise| { &m.signed_entry_timestamp },
                |m: &mut InclusionPromise| { &mut m.signed_entry_timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InclusionPromise>(
                "InclusionPromise",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InclusionPromise {
        static instance: ::protobuf::rt::LazyV2<InclusionPromise> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InclusionPromise::new)
    }
}

impl ::protobuf::Clear for InclusionPromise {
    fn clear(&mut self) {
        self.signed_entry_timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InclusionPromise {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InclusionPromise {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransparencyLogEntry {
    // message fields
    pub log_index: i64,
    pub log_id: ::protobuf::SingularPtrField<super::sigstore_common::LogId>,
    pub kind_version: ::protobuf::SingularPtrField<KindVersion>,
    pub integrated_time: i64,
    pub inclusion_promise: ::protobuf::SingularPtrField<InclusionPromise>,
    pub inclusion_proof: ::protobuf::SingularPtrField<InclusionProof>,
    pub canonicalized_body: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransparencyLogEntry {
    fn default() -> &'a TransparencyLogEntry {
        <TransparencyLogEntry as ::protobuf::Message>::default_instance()
    }
}

impl TransparencyLogEntry {
    pub fn new() -> TransparencyLogEntry {
        ::std::default::Default::default()
    }

    // int64 log_index = 1;


    pub fn get_log_index(&self) -> i64 {
        self.log_index
    }
    pub fn clear_log_index(&mut self) {
        self.log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_log_index(&mut self, v: i64) {
        self.log_index = v;
    }

    // .dev.sigstore.common.v1.LogId log_id = 2;


    pub fn get_log_id(&self) -> &super::sigstore_common::LogId {
        self.log_id.as_ref().unwrap_or_else(|| <super::sigstore_common::LogId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_log_id(&mut self) {
        self.log_id.clear();
    }

    pub fn has_log_id(&self) -> bool {
        self.log_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_log_id(&mut self, v: super::sigstore_common::LogId) {
        self.log_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log_id(&mut self) -> &mut super::sigstore_common::LogId {
        if self.log_id.is_none() {
            self.log_id.set_default();
        }
        self.log_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_log_id(&mut self) -> super::sigstore_common::LogId {
        self.log_id.take().unwrap_or_else(|| super::sigstore_common::LogId::new())
    }

    // .dev.sigstore.rekor.v1.KindVersion kind_version = 3;


    pub fn get_kind_version(&self) -> &KindVersion {
        self.kind_version.as_ref().unwrap_or_else(|| <KindVersion as ::protobuf::Message>::default_instance())
    }
    pub fn clear_kind_version(&mut self) {
        self.kind_version.clear();
    }

    pub fn has_kind_version(&self) -> bool {
        self.kind_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kind_version(&mut self, v: KindVersion) {
        self.kind_version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind_version(&mut self) -> &mut KindVersion {
        if self.kind_version.is_none() {
            self.kind_version.set_default();
        }
        self.kind_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_kind_version(&mut self) -> KindVersion {
        self.kind_version.take().unwrap_or_else(|| KindVersion::new())
    }

    // int64 integrated_time = 4;


    pub fn get_integrated_time(&self) -> i64 {
        self.integrated_time
    }
    pub fn clear_integrated_time(&mut self) {
        self.integrated_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_integrated_time(&mut self, v: i64) {
        self.integrated_time = v;
    }

    // .dev.sigstore.rekor.v1.InclusionPromise inclusion_promise = 5;


    pub fn get_inclusion_promise(&self) -> &InclusionPromise {
        self.inclusion_promise.as_ref().unwrap_or_else(|| <InclusionPromise as ::protobuf::Message>::default_instance())
    }
    pub fn clear_inclusion_promise(&mut self) {
        self.inclusion_promise.clear();
    }

    pub fn has_inclusion_promise(&self) -> bool {
        self.inclusion_promise.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inclusion_promise(&mut self, v: InclusionPromise) {
        self.inclusion_promise = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inclusion_promise(&mut self) -> &mut InclusionPromise {
        if self.inclusion_promise.is_none() {
            self.inclusion_promise.set_default();
        }
        self.inclusion_promise.as_mut().unwrap()
    }

    // Take field
    pub fn take_inclusion_promise(&mut self) -> InclusionPromise {
        self.inclusion_promise.take().unwrap_or_else(|| InclusionPromise::new())
    }

    // .dev.sigstore.rekor.v1.InclusionProof inclusion_proof = 6;


    pub fn get_inclusion_proof(&self) -> &InclusionProof {
        self.inclusion_proof.as_ref().unwrap_or_else(|| <InclusionProof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_inclusion_proof(&mut self) {
        self.inclusion_proof.clear();
    }

    pub fn has_inclusion_proof(&self) -> bool {
        self.inclusion_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inclusion_proof(&mut self, v: InclusionProof) {
        self.inclusion_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inclusion_proof(&mut self) -> &mut InclusionProof {
        if self.inclusion_proof.is_none() {
            self.inclusion_proof.set_default();
        }
        self.inclusion_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_inclusion_proof(&mut self) -> InclusionProof {
        self.inclusion_proof.take().unwrap_or_else(|| InclusionProof::new())
    }

    // bytes canonicalized_body = 7;


    pub fn get_canonicalized_body(&self) -> &[u8] {
        &self.canonicalized_body
    }
    pub fn clear_canonicalized_body(&mut self) {
        self.canonicalized_body.clear();
    }

    // Param is passed by value, moved
    pub fn set_canonicalized_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.canonicalized_body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_canonicalized_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.canonicalized_body
    }

    // Take field
    pub fn take_canonicalized_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.canonicalized_body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TransparencyLogEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.log_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.kind_version {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.inclusion_promise {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.inclusion_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.log_index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.log_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.kind_version)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.integrated_time = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.inclusion_promise)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.inclusion_proof)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.canonicalized_body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.log_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.log_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.kind_version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.integrated_time != 0 {
            my_size += ::protobuf::rt::value_size(4, self.integrated_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.inclusion_promise.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.inclusion_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.canonicalized_body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.canonicalized_body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.log_index != 0 {
            os.write_int64(1, self.log_index)?;
        }
        if let Some(ref v) = self.log_id.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.kind_version.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.integrated_time != 0 {
            os.write_int64(4, self.integrated_time)?;
        }
        if let Some(ref v) = self.inclusion_promise.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.inclusion_proof.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.canonicalized_body.is_empty() {
            os.write_bytes(7, &self.canonicalized_body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransparencyLogEntry {
        TransparencyLogEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "log_index",
                |m: &TransparencyLogEntry| { &m.log_index },
                |m: &mut TransparencyLogEntry| { &mut m.log_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::sigstore_common::LogId>>(
                "log_id",
                |m: &TransparencyLogEntry| { &m.log_id },
                |m: &mut TransparencyLogEntry| { &mut m.log_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<KindVersion>>(
                "kind_version",
                |m: &TransparencyLogEntry| { &m.kind_version },
                |m: &mut TransparencyLogEntry| { &mut m.kind_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "integrated_time",
                |m: &TransparencyLogEntry| { &m.integrated_time },
                |m: &mut TransparencyLogEntry| { &mut m.integrated_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InclusionPromise>>(
                "inclusion_promise",
                |m: &TransparencyLogEntry| { &m.inclusion_promise },
                |m: &mut TransparencyLogEntry| { &mut m.inclusion_promise },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InclusionProof>>(
                "inclusion_proof",
                |m: &TransparencyLogEntry| { &m.inclusion_proof },
                |m: &mut TransparencyLogEntry| { &mut m.inclusion_proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "canonicalized_body",
                |m: &TransparencyLogEntry| { &m.canonicalized_body },
                |m: &mut TransparencyLogEntry| { &mut m.canonicalized_body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransparencyLogEntry>(
                "TransparencyLogEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransparencyLogEntry {
        static instance: ::protobuf::rt::LazyV2<TransparencyLogEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransparencyLogEntry::new)
    }
}

impl ::protobuf::Clear for TransparencyLogEntry {
    fn clear(&mut self) {
        self.log_index = 0;
        self.log_id.clear();
        self.kind_version.clear();
        self.integrated_time = 0;
        self.inclusion_promise.clear();
        self.inclusion_proof.clear();
        self.canonicalized_body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransparencyLogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransparencyLogEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14sigstore_rekor.proto\x12\x15dev.sigstore.rekor.v1\x1a\x1fgoogle/ap\
    i/field_behavior.proto\x1a\x15sigstore_common.proto\"E\n\x0bKindVersion\
    \x12\x17\n\x04kind\x18\x01\x20\x01(\tR\x04kindB\x03\xe0A\x02\x12\x1d\n\
    \x07version\x18\x02\x20\x01(\tR\x07versionB\x03\xe0A\x02\"-\n\nCheckpoin\
    t\x12\x1f\n\x08envelope\x18\x01\x20\x01(\tR\x08envelopeB\x03\xe0A\x02\"\
    \xdb\x01\n\x0eInclusionProof\x12\x20\n\tlog_index\x18\x01\x20\x01(\x03R\
    \x08logIndexB\x03\xe0A\x02\x12\x20\n\troot_hash\x18\x02\x20\x01(\x0cR\
    \x08rootHashB\x03\xe0A\x02\x12\x20\n\ttree_size\x18\x03\x20\x01(\x03R\
    \x08treeSizeB\x03\xe0A\x02\x12\x1b\n\x06hashes\x18\x04\x20\x03(\x0cR\x06\
    hashesB\x03\xe0A\x02\x12F\n\ncheckpoint\x18\x05\x20\x01(\x0b2!.dev.sigst\
    ore.rekor.v1.CheckpointR\ncheckpointB\x03\xe0A\x02\"M\n\x10InclusionProm\
    ise\x129\n\x16signed_entry_timestamp\x18\x01\x20\x01(\x0cR\x14signedEntr\
    yTimestampB\x03\xe0A\x02\"\xc7\x03\n\x14TransparencyLogEntry\x12\x20\n\t\
    log_index\x18\x01\x20\x01(\x03R\x08logIndexB\x03\xe0A\x02\x129\n\x06log_\
    id\x18\x02\x20\x01(\x0b2\x1d.dev.sigstore.common.v1.LogIdR\x05logIdB\x03\
    \xe0A\x02\x12J\n\x0ckind_version\x18\x03\x20\x01(\x0b2\".dev.sigstore.re\
    kor.v1.KindVersionR\x0bkindVersionB\x03\xe0A\x02\x12,\n\x0fintegrated_ti\
    me\x18\x04\x20\x01(\x03R\x0eintegratedTimeB\x03\xe0A\x02\x12T\n\x11inclu\
    sion_promise\x18\x05\x20\x01(\x0b2'.dev.sigstore.rekor.v1.InclusionPromi\
    seR\x10inclusionPromise\x12S\n\x0finclusion_proof\x18\x06\x20\x01(\x0b2%\
    .dev.sigstore.rekor.v1.InclusionProofR\x0einclusionProofB\x03\xe0A\x02\
    \x12-\n\x12canonicalized_body\x18\x07\x20\x01(\x0cR\x11canonicalizedBody\
    Bx\n\x1bdev.sigstore.proto.rekor.v1B\nRekorProtoP\x01Z5github.com/sigsto\
    re/protobuf-specs/gen/pb-go/rekor/v1\xea\x02\x13Sigstore::Rekor::V1b\x06\
    proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
