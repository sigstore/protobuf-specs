// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `sigstore_common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct HashOutput {
    // message fields
    pub algorithm: HashAlgorithm,
    pub digest: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HashOutput {
    fn default() -> &'a HashOutput {
        <HashOutput as ::protobuf::Message>::default_instance()
    }
}

impl HashOutput {
    pub fn new() -> HashOutput {
        ::std::default::Default::default()
    }

    // .dev.sigstore.common.v1.HashAlgorithm algorithm = 1;


    pub fn get_algorithm(&self) -> HashAlgorithm {
        self.algorithm
    }
    pub fn clear_algorithm(&mut self) {
        self.algorithm = HashAlgorithm::HASH_ALGORITHM_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_algorithm(&mut self, v: HashAlgorithm) {
        self.algorithm = v;
    }

    // bytes digest = 2;


    pub fn get_digest(&self) -> &[u8] {
        &self.digest
    }
    pub fn clear_digest(&mut self) {
        self.digest.clear();
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: ::std::vec::Vec<u8>) {
        self.digest = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.digest
    }

    // Take field
    pub fn take_digest(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.digest, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for HashOutput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.algorithm, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.digest)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.algorithm != HashAlgorithm::HASH_ALGORITHM_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.algorithm);
        }
        if !self.digest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.digest);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.algorithm != HashAlgorithm::HASH_ALGORITHM_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.algorithm))?;
        }
        if !self.digest.is_empty() {
            os.write_bytes(2, &self.digest)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HashOutput {
        HashOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HashAlgorithm>>(
                "algorithm",
                |m: &HashOutput| { &m.algorithm },
                |m: &mut HashOutput| { &mut m.algorithm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "digest",
                |m: &HashOutput| { &m.digest },
                |m: &mut HashOutput| { &mut m.digest },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HashOutput>(
                "HashOutput",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HashOutput {
        static instance: ::protobuf::rt::LazyV2<HashOutput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HashOutput::new)
    }
}

impl ::protobuf::Clear for HashOutput {
    fn clear(&mut self) {
        self.algorithm = HashAlgorithm::HASH_ALGORITHM_UNSPECIFIED;
        self.digest.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HashOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HashOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MessageSignature {
    // message fields
    pub message_digest: ::protobuf::SingularPtrField<HashOutput>,
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageSignature {
    fn default() -> &'a MessageSignature {
        <MessageSignature as ::protobuf::Message>::default_instance()
    }
}

impl MessageSignature {
    pub fn new() -> MessageSignature {
        ::std::default::Default::default()
    }

    // .dev.sigstore.common.v1.HashOutput message_digest = 1;


    pub fn get_message_digest(&self) -> &HashOutput {
        self.message_digest.as_ref().unwrap_or_else(|| <HashOutput as ::protobuf::Message>::default_instance())
    }
    pub fn clear_message_digest(&mut self) {
        self.message_digest.clear();
    }

    pub fn has_message_digest(&self) -> bool {
        self.message_digest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message_digest(&mut self, v: HashOutput) {
        self.message_digest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_digest(&mut self) -> &mut HashOutput {
        if self.message_digest.is_none() {
            self.message_digest.set_default();
        }
        self.message_digest.as_mut().unwrap()
    }

    // Take field
    pub fn take_message_digest(&mut self) -> HashOutput {
        self.message_digest.take().unwrap_or_else(|| HashOutput::new())
    }

    // bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MessageSignature {
    fn is_initialized(&self) -> bool {
        for v in &self.message_digest {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message_digest)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.message_digest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.message_digest.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageSignature {
        MessageSignature::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HashOutput>>(
                "message_digest",
                |m: &MessageSignature| { &m.message_digest },
                |m: &mut MessageSignature| { &mut m.message_digest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &MessageSignature| { &m.signature },
                |m: &mut MessageSignature| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageSignature>(
                "MessageSignature",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageSignature {
        static instance: ::protobuf::rt::LazyV2<MessageSignature> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageSignature::new)
    }
}

impl ::protobuf::Clear for MessageSignature {
    fn clear(&mut self) {
        self.message_digest.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageSignature {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogId {
    // message fields
    pub key_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogId {
    fn default() -> &'a LogId {
        <LogId as ::protobuf::Message>::default_instance()
    }
}

impl LogId {
    pub fn new() -> LogId {
        ::std::default::Default::default()
    }

    // bytes key_id = 1;


    pub fn get_key_id(&self) -> &[u8] {
        &self.key_id
    }
    pub fn clear_key_id(&mut self) {
        self.key_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.key_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key_id
    }

    // Take field
    pub fn take_key_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LogId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key_id.is_empty() {
            os.write_bytes(1, &self.key_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogId {
        LogId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key_id",
                |m: &LogId| { &m.key_id },
                |m: &mut LogId| { &mut m.key_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogId>(
                "LogId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogId {
        static instance: ::protobuf::rt::LazyV2<LogId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogId::new)
    }
}

impl ::protobuf::Clear for LogId {
    fn clear(&mut self) {
        self.key_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RFC3161SignedTimestamp {
    // message fields
    pub signed_timestamp: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RFC3161SignedTimestamp {
    fn default() -> &'a RFC3161SignedTimestamp {
        <RFC3161SignedTimestamp as ::protobuf::Message>::default_instance()
    }
}

impl RFC3161SignedTimestamp {
    pub fn new() -> RFC3161SignedTimestamp {
        ::std::default::Default::default()
    }

    // bytes signed_timestamp = 1;


    pub fn get_signed_timestamp(&self) -> &[u8] {
        &self.signed_timestamp
    }
    pub fn clear_signed_timestamp(&mut self) {
        self.signed_timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_signed_timestamp(&mut self, v: ::std::vec::Vec<u8>) {
        self.signed_timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_timestamp(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signed_timestamp
    }

    // Take field
    pub fn take_signed_timestamp(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signed_timestamp, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RFC3161SignedTimestamp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signed_timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signed_timestamp.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signed_timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.signed_timestamp.is_empty() {
            os.write_bytes(1, &self.signed_timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RFC3161SignedTimestamp {
        RFC3161SignedTimestamp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signed_timestamp",
                |m: &RFC3161SignedTimestamp| { &m.signed_timestamp },
                |m: &mut RFC3161SignedTimestamp| { &mut m.signed_timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RFC3161SignedTimestamp>(
                "RFC3161SignedTimestamp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RFC3161SignedTimestamp {
        static instance: ::protobuf::rt::LazyV2<RFC3161SignedTimestamp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RFC3161SignedTimestamp::new)
    }
}

impl ::protobuf::Clear for RFC3161SignedTimestamp {
    fn clear(&mut self) {
        self.signed_timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RFC3161SignedTimestamp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RFC3161SignedTimestamp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PublicKey {
    // message fields
    pub key_details: PublicKeyDetails,
    // message oneof groups
    pub _raw_bytes: ::std::option::Option<PublicKey_oneof__raw_bytes>,
    pub _valid_for: ::std::option::Option<PublicKey_oneof__valid_for>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PublicKey {
    fn default() -> &'a PublicKey {
        <PublicKey as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum PublicKey_oneof__raw_bytes {
    raw_bytes(::std::vec::Vec<u8>),
}

#[derive(Clone,PartialEq,Debug)]
pub enum PublicKey_oneof__valid_for {
    valid_for(TimeRange),
}

impl PublicKey {
    pub fn new() -> PublicKey {
        ::std::default::Default::default()
    }

    // bytes raw_bytes = 1;


    pub fn get_raw_bytes(&self) -> &[u8] {
        match self._raw_bytes {
            ::std::option::Option::Some(PublicKey_oneof__raw_bytes::raw_bytes(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_raw_bytes(&mut self) {
        self._raw_bytes = ::std::option::Option::None;
    }

    pub fn has_raw_bytes(&self) -> bool {
        match self._raw_bytes {
            ::std::option::Option::Some(PublicKey_oneof__raw_bytes::raw_bytes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self._raw_bytes = ::std::option::Option::Some(PublicKey_oneof__raw_bytes::raw_bytes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(PublicKey_oneof__raw_bytes::raw_bytes(_)) = self._raw_bytes {
        } else {
            self._raw_bytes = ::std::option::Option::Some(PublicKey_oneof__raw_bytes::raw_bytes(::std::vec::Vec::new()));
        }
        match self._raw_bytes {
            ::std::option::Option::Some(PublicKey_oneof__raw_bytes::raw_bytes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_bytes(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_raw_bytes() {
            match self._raw_bytes.take() {
                ::std::option::Option::Some(PublicKey_oneof__raw_bytes::raw_bytes(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .dev.sigstore.common.v1.PublicKeyDetails key_details = 2;


    pub fn get_key_details(&self) -> PublicKeyDetails {
        self.key_details
    }
    pub fn clear_key_details(&mut self) {
        self.key_details = PublicKeyDetails::PUBLIC_KEY_DETAILS_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_key_details(&mut self, v: PublicKeyDetails) {
        self.key_details = v;
    }

    // .dev.sigstore.common.v1.TimeRange valid_for = 3;


    pub fn get_valid_for(&self) -> &TimeRange {
        match self._valid_for {
            ::std::option::Option::Some(PublicKey_oneof__valid_for::valid_for(ref v)) => v,
            _ => <TimeRange as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_valid_for(&mut self) {
        self._valid_for = ::std::option::Option::None;
    }

    pub fn has_valid_for(&self) -> bool {
        match self._valid_for {
            ::std::option::Option::Some(PublicKey_oneof__valid_for::valid_for(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_valid_for(&mut self, v: TimeRange) {
        self._valid_for = ::std::option::Option::Some(PublicKey_oneof__valid_for::valid_for(v))
    }

    // Mutable pointer to the field.
    pub fn mut_valid_for(&mut self) -> &mut TimeRange {
        if let ::std::option::Option::Some(PublicKey_oneof__valid_for::valid_for(_)) = self._valid_for {
        } else {
            self._valid_for = ::std::option::Option::Some(PublicKey_oneof__valid_for::valid_for(TimeRange::new()));
        }
        match self._valid_for {
            ::std::option::Option::Some(PublicKey_oneof__valid_for::valid_for(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_valid_for(&mut self) -> TimeRange {
        if self.has_valid_for() {
            match self._valid_for.take() {
                ::std::option::Option::Some(PublicKey_oneof__valid_for::valid_for(v)) => v,
                _ => panic!(),
            }
        } else {
            TimeRange::new()
        }
    }
}

impl ::protobuf::Message for PublicKey {
    fn is_initialized(&self) -> bool {
        if let Some(PublicKey_oneof__valid_for::valid_for(ref v)) = self._valid_for {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._raw_bytes = ::std::option::Option::Some(PublicKey_oneof__raw_bytes::raw_bytes(is.read_bytes()?));
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.key_details, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._valid_for = ::std::option::Option::Some(PublicKey_oneof__valid_for::valid_for(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.key_details != PublicKeyDetails::PUBLIC_KEY_DETAILS_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.key_details);
        }
        if let ::std::option::Option::Some(ref v) = self._raw_bytes {
            match v {
                &PublicKey_oneof__raw_bytes::raw_bytes(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._valid_for {
            match v {
                &PublicKey_oneof__valid_for::valid_for(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.key_details != PublicKeyDetails::PUBLIC_KEY_DETAILS_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.key_details))?;
        }
        if let ::std::option::Option::Some(ref v) = self._raw_bytes {
            match v {
                &PublicKey_oneof__raw_bytes::raw_bytes(ref v) => {
                    os.write_bytes(1, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self._valid_for {
            match v {
                &PublicKey_oneof__valid_for::valid_for(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PublicKey {
        PublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "raw_bytes",
                PublicKey::has_raw_bytes,
                PublicKey::get_raw_bytes,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PublicKeyDetails>>(
                "key_details",
                |m: &PublicKey| { &m.key_details },
                |m: &mut PublicKey| { &mut m.key_details },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TimeRange>(
                "valid_for",
                PublicKey::has_valid_for,
                PublicKey::get_valid_for,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PublicKey>(
                "PublicKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PublicKey {
        static instance: ::protobuf::rt::LazyV2<PublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PublicKey::new)
    }
}

impl ::protobuf::Clear for PublicKey {
    fn clear(&mut self) {
        self._raw_bytes = ::std::option::Option::None;
        self.key_details = PublicKeyDetails::PUBLIC_KEY_DETAILS_UNSPECIFIED;
        self._valid_for = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PublicKeyIdentifier {
    // message fields
    pub hint: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PublicKeyIdentifier {
    fn default() -> &'a PublicKeyIdentifier {
        <PublicKeyIdentifier as ::protobuf::Message>::default_instance()
    }
}

impl PublicKeyIdentifier {
    pub fn new() -> PublicKeyIdentifier {
        ::std::default::Default::default()
    }

    // string hint = 1;


    pub fn get_hint(&self) -> &str {
        &self.hint
    }
    pub fn clear_hint(&mut self) {
        self.hint.clear();
    }

    // Param is passed by value, moved
    pub fn set_hint(&mut self, v: ::std::string::String) {
        self.hint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hint(&mut self) -> &mut ::std::string::String {
        &mut self.hint
    }

    // Take field
    pub fn take_hint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hint, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PublicKeyIdentifier {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hint.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hint.is_empty() {
            os.write_string(1, &self.hint)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PublicKeyIdentifier {
        PublicKeyIdentifier::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hint",
                |m: &PublicKeyIdentifier| { &m.hint },
                |m: &mut PublicKeyIdentifier| { &mut m.hint },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PublicKeyIdentifier>(
                "PublicKeyIdentifier",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PublicKeyIdentifier {
        static instance: ::protobuf::rt::LazyV2<PublicKeyIdentifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PublicKeyIdentifier::new)
    }
}

impl ::protobuf::Clear for PublicKeyIdentifier {
    fn clear(&mut self) {
        self.hint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PublicKeyIdentifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublicKeyIdentifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ObjectIdentifier {
    // message fields
    pub id: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ObjectIdentifier {
    fn default() -> &'a ObjectIdentifier {
        <ObjectIdentifier as ::protobuf::Message>::default_instance()
    }
}

impl ObjectIdentifier {
    pub fn new() -> ObjectIdentifier {
        ::std::default::Default::default()
    }

    // repeated int32 id = 1;


    pub fn get_id(&self) -> &[i32] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<i32>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ObjectIdentifier {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.id {
            os.write_int32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ObjectIdentifier {
        ObjectIdentifier::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "id",
                |m: &ObjectIdentifier| { &m.id },
                |m: &mut ObjectIdentifier| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ObjectIdentifier>(
                "ObjectIdentifier",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ObjectIdentifier {
        static instance: ::protobuf::rt::LazyV2<ObjectIdentifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ObjectIdentifier::new)
    }
}

impl ::protobuf::Clear for ObjectIdentifier {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ObjectIdentifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ObjectIdentifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ObjectIdentifierValuePair {
    // message fields
    pub oid: ::protobuf::SingularPtrField<ObjectIdentifier>,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ObjectIdentifierValuePair {
    fn default() -> &'a ObjectIdentifierValuePair {
        <ObjectIdentifierValuePair as ::protobuf::Message>::default_instance()
    }
}

impl ObjectIdentifierValuePair {
    pub fn new() -> ObjectIdentifierValuePair {
        ::std::default::Default::default()
    }

    // .dev.sigstore.common.v1.ObjectIdentifier oid = 1;


    pub fn get_oid(&self) -> &ObjectIdentifier {
        self.oid.as_ref().unwrap_or_else(|| <ObjectIdentifier as ::protobuf::Message>::default_instance())
    }
    pub fn clear_oid(&mut self) {
        self.oid.clear();
    }

    pub fn has_oid(&self) -> bool {
        self.oid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_oid(&mut self, v: ObjectIdentifier) {
        self.oid = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oid(&mut self) -> &mut ObjectIdentifier {
        if self.oid.is_none() {
            self.oid.set_default();
        }
        self.oid.as_mut().unwrap()
    }

    // Take field
    pub fn take_oid(&mut self) -> ObjectIdentifier {
        self.oid.take().unwrap_or_else(|| ObjectIdentifier::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ObjectIdentifierValuePair {
    fn is_initialized(&self) -> bool {
        for v in &self.oid {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.oid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.oid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.oid.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ObjectIdentifierValuePair {
        ObjectIdentifierValuePair::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ObjectIdentifier>>(
                "oid",
                |m: &ObjectIdentifierValuePair| { &m.oid },
                |m: &mut ObjectIdentifierValuePair| { &mut m.oid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &ObjectIdentifierValuePair| { &m.value },
                |m: &mut ObjectIdentifierValuePair| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ObjectIdentifierValuePair>(
                "ObjectIdentifierValuePair",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ObjectIdentifierValuePair {
        static instance: ::protobuf::rt::LazyV2<ObjectIdentifierValuePair> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ObjectIdentifierValuePair::new)
    }
}

impl ::protobuf::Clear for ObjectIdentifierValuePair {
    fn clear(&mut self) {
        self.oid.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ObjectIdentifierValuePair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ObjectIdentifierValuePair {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DistinguishedName {
    // message fields
    pub organization: ::std::string::String,
    pub common_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DistinguishedName {
    fn default() -> &'a DistinguishedName {
        <DistinguishedName as ::protobuf::Message>::default_instance()
    }
}

impl DistinguishedName {
    pub fn new() -> DistinguishedName {
        ::std::default::Default::default()
    }

    // string organization = 1;


    pub fn get_organization(&self) -> &str {
        &self.organization
    }
    pub fn clear_organization(&mut self) {
        self.organization.clear();
    }

    // Param is passed by value, moved
    pub fn set_organization(&mut self, v: ::std::string::String) {
        self.organization = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization(&mut self) -> &mut ::std::string::String {
        &mut self.organization
    }

    // Take field
    pub fn take_organization(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.organization, ::std::string::String::new())
    }

    // string common_name = 2;


    pub fn get_common_name(&self) -> &str {
        &self.common_name
    }
    pub fn clear_common_name(&mut self) {
        self.common_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_common_name(&mut self, v: ::std::string::String) {
        self.common_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_name(&mut self) -> &mut ::std::string::String {
        &mut self.common_name
    }

    // Take field
    pub fn take_common_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.common_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DistinguishedName {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.organization)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.common_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.organization.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.organization);
        }
        if !self.common_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.common_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.organization.is_empty() {
            os.write_string(1, &self.organization)?;
        }
        if !self.common_name.is_empty() {
            os.write_string(2, &self.common_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DistinguishedName {
        DistinguishedName::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "organization",
                |m: &DistinguishedName| { &m.organization },
                |m: &mut DistinguishedName| { &mut m.organization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "common_name",
                |m: &DistinguishedName| { &m.common_name },
                |m: &mut DistinguishedName| { &mut m.common_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DistinguishedName>(
                "DistinguishedName",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DistinguishedName {
        static instance: ::protobuf::rt::LazyV2<DistinguishedName> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DistinguishedName::new)
    }
}

impl ::protobuf::Clear for DistinguishedName {
    fn clear(&mut self) {
        self.organization.clear();
        self.common_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DistinguishedName {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DistinguishedName {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct X509Certificate {
    // message fields
    pub raw_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a X509Certificate {
    fn default() -> &'a X509Certificate {
        <X509Certificate as ::protobuf::Message>::default_instance()
    }
}

impl X509Certificate {
    pub fn new() -> X509Certificate {
        ::std::default::Default::default()
    }

    // bytes raw_bytes = 1;


    pub fn get_raw_bytes(&self) -> &[u8] {
        &self.raw_bytes
    }
    pub fn clear_raw_bytes(&mut self) {
        self.raw_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.raw_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.raw_bytes
    }

    // Take field
    pub fn take_raw_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.raw_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for X509Certificate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.raw_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.raw_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.raw_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.raw_bytes.is_empty() {
            os.write_bytes(1, &self.raw_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> X509Certificate {
        X509Certificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "raw_bytes",
                |m: &X509Certificate| { &m.raw_bytes },
                |m: &mut X509Certificate| { &mut m.raw_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<X509Certificate>(
                "X509Certificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static X509Certificate {
        static instance: ::protobuf::rt::LazyV2<X509Certificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(X509Certificate::new)
    }
}

impl ::protobuf::Clear for X509Certificate {
    fn clear(&mut self) {
        self.raw_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for X509Certificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for X509Certificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubjectAlternativeName {
    // message fields
    pub field_type: SubjectAlternativeNameType,
    // message oneof groups
    pub identity: ::std::option::Option<SubjectAlternativeName_oneof_identity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubjectAlternativeName {
    fn default() -> &'a SubjectAlternativeName {
        <SubjectAlternativeName as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SubjectAlternativeName_oneof_identity {
    regexp(::std::string::String),
    value(::std::string::String),
}

impl SubjectAlternativeName {
    pub fn new() -> SubjectAlternativeName {
        ::std::default::Default::default()
    }

    // .dev.sigstore.common.v1.SubjectAlternativeNameType type = 1;


    pub fn get_field_type(&self) -> SubjectAlternativeNameType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = SubjectAlternativeNameType::SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: SubjectAlternativeNameType) {
        self.field_type = v;
    }

    // string regexp = 2;


    pub fn get_regexp(&self) -> &str {
        match self.identity {
            ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::regexp(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_regexp(&mut self) {
        self.identity = ::std::option::Option::None;
    }

    pub fn has_regexp(&self) -> bool {
        match self.identity {
            ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::regexp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_regexp(&mut self, v: ::std::string::String) {
        self.identity = ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::regexp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_regexp(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::regexp(_)) = self.identity {
        } else {
            self.identity = ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::regexp(::std::string::String::new()));
        }
        match self.identity {
            ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::regexp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_regexp(&mut self) -> ::std::string::String {
        if self.has_regexp() {
            match self.identity.take() {
                ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::regexp(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string value = 3;


    pub fn get_value(&self) -> &str {
        match self.identity {
            ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.identity = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        match self.identity {
            ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.identity = ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::value(_)) = self.identity {
        } else {
            self.identity = ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::value(::std::string::String::new()));
        }
        match self.identity {
            ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        if self.has_value() {
            match self.identity.take() {
                ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for SubjectAlternativeName {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.identity = ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::regexp(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.identity = ::std::option::Option::Some(SubjectAlternativeName_oneof_identity::value(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != SubjectAlternativeNameType::SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if let ::std::option::Option::Some(ref v) = self.identity {
            match v {
                &SubjectAlternativeName_oneof_identity::regexp(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &SubjectAlternativeName_oneof_identity::value(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != SubjectAlternativeNameType::SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.identity {
            match v {
                &SubjectAlternativeName_oneof_identity::regexp(ref v) => {
                    os.write_string(2, v)?;
                },
                &SubjectAlternativeName_oneof_identity::value(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubjectAlternativeName {
        SubjectAlternativeName::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SubjectAlternativeNameType>>(
                "type",
                |m: &SubjectAlternativeName| { &m.field_type },
                |m: &mut SubjectAlternativeName| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "regexp",
                SubjectAlternativeName::has_regexp,
                SubjectAlternativeName::get_regexp,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "value",
                SubjectAlternativeName::has_value,
                SubjectAlternativeName::get_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubjectAlternativeName>(
                "SubjectAlternativeName",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubjectAlternativeName {
        static instance: ::protobuf::rt::LazyV2<SubjectAlternativeName> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubjectAlternativeName::new)
    }
}

impl ::protobuf::Clear for SubjectAlternativeName {
    fn clear(&mut self) {
        self.field_type = SubjectAlternativeNameType::SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED;
        self.identity = ::std::option::Option::None;
        self.identity = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubjectAlternativeName {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubjectAlternativeName {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct X509CertificateChain {
    // message fields
    pub certificates: ::protobuf::RepeatedField<X509Certificate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a X509CertificateChain {
    fn default() -> &'a X509CertificateChain {
        <X509CertificateChain as ::protobuf::Message>::default_instance()
    }
}

impl X509CertificateChain {
    pub fn new() -> X509CertificateChain {
        ::std::default::Default::default()
    }

    // repeated .dev.sigstore.common.v1.X509Certificate certificates = 1;


    pub fn get_certificates(&self) -> &[X509Certificate] {
        &self.certificates
    }
    pub fn clear_certificates(&mut self) {
        self.certificates.clear();
    }

    // Param is passed by value, moved
    pub fn set_certificates(&mut self, v: ::protobuf::RepeatedField<X509Certificate>) {
        self.certificates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_certificates(&mut self) -> &mut ::protobuf::RepeatedField<X509Certificate> {
        &mut self.certificates
    }

    // Take field
    pub fn take_certificates(&mut self) -> ::protobuf::RepeatedField<X509Certificate> {
        ::std::mem::replace(&mut self.certificates, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for X509CertificateChain {
    fn is_initialized(&self) -> bool {
        for v in &self.certificates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.certificates)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.certificates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.certificates {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> X509CertificateChain {
        X509CertificateChain::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<X509Certificate>>(
                "certificates",
                |m: &X509CertificateChain| { &m.certificates },
                |m: &mut X509CertificateChain| { &mut m.certificates },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<X509CertificateChain>(
                "X509CertificateChain",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static X509CertificateChain {
        static instance: ::protobuf::rt::LazyV2<X509CertificateChain> = ::protobuf::rt::LazyV2::INIT;
        instance.get(X509CertificateChain::new)
    }
}

impl ::protobuf::Clear for X509CertificateChain {
    fn clear(&mut self) {
        self.certificates.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for X509CertificateChain {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for X509CertificateChain {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimeRange {
    // message fields
    pub start: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // message oneof groups
    pub _end: ::std::option::Option<TimeRange_oneof__end>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimeRange {
    fn default() -> &'a TimeRange {
        <TimeRange as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TimeRange_oneof__end {
    end(::protobuf::well_known_types::Timestamp),
}

impl TimeRange {
    pub fn new() -> TimeRange {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp start = 1;


    pub fn get_start(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start(&mut self) {
        self.start.clear();
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start.is_none() {
            self.start.set_default();
        }
        self.start.as_mut().unwrap()
    }

    // Take field
    pub fn take_start(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end = 2;


    pub fn get_end(&self) -> &::protobuf::well_known_types::Timestamp {
        match self._end {
            ::std::option::Option::Some(TimeRange_oneof__end::end(ref v)) => v,
            _ => <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_end(&mut self) {
        self._end = ::std::option::Option::None;
    }

    pub fn has_end(&self) -> bool {
        match self._end {
            ::std::option::Option::Some(TimeRange_oneof__end::end(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self._end = ::std::option::Option::Some(TimeRange_oneof__end::end(v))
    }

    // Mutable pointer to the field.
    pub fn mut_end(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if let ::std::option::Option::Some(TimeRange_oneof__end::end(_)) = self._end {
        } else {
            self._end = ::std::option::Option::Some(TimeRange_oneof__end::end(::protobuf::well_known_types::Timestamp::new()));
        }
        match self._end {
            ::std::option::Option::Some(TimeRange_oneof__end::end(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_end(&mut self) -> ::protobuf::well_known_types::Timestamp {
        if self.has_end() {
            match self._end.take() {
                ::std::option::Option::Some(TimeRange_oneof__end::end(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Timestamp::new()
        }
    }
}

impl ::protobuf::Message for TimeRange {
    fn is_initialized(&self) -> bool {
        for v in &self.start {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(TimeRange_oneof__end::end(ref v)) = self._end {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self._end = ::std::option::Option::Some(TimeRange_oneof__end::end(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.start.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self._end {
            match v {
                &TimeRange_oneof__end::end(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.start.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self._end {
            match v {
                &TimeRange_oneof__end::end(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeRange {
        TimeRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start",
                |m: &TimeRange| { &m.start },
                |m: &mut TimeRange| { &mut m.start },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Timestamp>(
                "end",
                TimeRange::has_end,
                TimeRange::get_end,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimeRange>(
                "TimeRange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TimeRange {
        static instance: ::protobuf::rt::LazyV2<TimeRange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TimeRange::new)
    }
}

impl ::protobuf::Clear for TimeRange {
    fn clear(&mut self) {
        self.start.clear();
        self._end = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeRange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HashAlgorithm {
    HASH_ALGORITHM_UNSPECIFIED = 0,
    SHA2_256 = 1,
}

impl ::protobuf::ProtobufEnum for HashAlgorithm {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HashAlgorithm> {
        match value {
            0 => ::std::option::Option::Some(HashAlgorithm::HASH_ALGORITHM_UNSPECIFIED),
            1 => ::std::option::Option::Some(HashAlgorithm::SHA2_256),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HashAlgorithm] = &[
            HashAlgorithm::HASH_ALGORITHM_UNSPECIFIED,
            HashAlgorithm::SHA2_256,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HashAlgorithm>("HashAlgorithm", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HashAlgorithm {
}

impl ::std::default::Default for HashAlgorithm {
    fn default() -> Self {
        HashAlgorithm::HASH_ALGORITHM_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for HashAlgorithm {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PublicKeyDetails {
    PUBLIC_KEY_DETAILS_UNSPECIFIED = 0,
    PKCS1_RSA_PKCS1V5 = 1,
    PKCS1_RSA_PSS = 2,
    PKIX_RSA_PKCS1V5 = 3,
    PKIX_RSA_PSS = 4,
    PKIX_ECDSA_P256_SHA_256 = 5,
    PKIX_ECDSA_P256_HMAC_SHA_256 = 6,
    PKIX_ED25519 = 7,
}

impl ::protobuf::ProtobufEnum for PublicKeyDetails {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PublicKeyDetails> {
        match value {
            0 => ::std::option::Option::Some(PublicKeyDetails::PUBLIC_KEY_DETAILS_UNSPECIFIED),
            1 => ::std::option::Option::Some(PublicKeyDetails::PKCS1_RSA_PKCS1V5),
            2 => ::std::option::Option::Some(PublicKeyDetails::PKCS1_RSA_PSS),
            3 => ::std::option::Option::Some(PublicKeyDetails::PKIX_RSA_PKCS1V5),
            4 => ::std::option::Option::Some(PublicKeyDetails::PKIX_RSA_PSS),
            5 => ::std::option::Option::Some(PublicKeyDetails::PKIX_ECDSA_P256_SHA_256),
            6 => ::std::option::Option::Some(PublicKeyDetails::PKIX_ECDSA_P256_HMAC_SHA_256),
            7 => ::std::option::Option::Some(PublicKeyDetails::PKIX_ED25519),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PublicKeyDetails] = &[
            PublicKeyDetails::PUBLIC_KEY_DETAILS_UNSPECIFIED,
            PublicKeyDetails::PKCS1_RSA_PKCS1V5,
            PublicKeyDetails::PKCS1_RSA_PSS,
            PublicKeyDetails::PKIX_RSA_PKCS1V5,
            PublicKeyDetails::PKIX_RSA_PSS,
            PublicKeyDetails::PKIX_ECDSA_P256_SHA_256,
            PublicKeyDetails::PKIX_ECDSA_P256_HMAC_SHA_256,
            PublicKeyDetails::PKIX_ED25519,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PublicKeyDetails>("PublicKeyDetails", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PublicKeyDetails {
}

impl ::std::default::Default for PublicKeyDetails {
    fn default() -> Self {
        PublicKeyDetails::PUBLIC_KEY_DETAILS_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for PublicKeyDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SubjectAlternativeNameType {
    SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED = 0,
    EMAIL = 1,
    URI = 2,
    OTHER_NAME = 3,
}

impl ::protobuf::ProtobufEnum for SubjectAlternativeNameType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SubjectAlternativeNameType> {
        match value {
            0 => ::std::option::Option::Some(SubjectAlternativeNameType::SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(SubjectAlternativeNameType::EMAIL),
            2 => ::std::option::Option::Some(SubjectAlternativeNameType::URI),
            3 => ::std::option::Option::Some(SubjectAlternativeNameType::OTHER_NAME),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SubjectAlternativeNameType] = &[
            SubjectAlternativeNameType::SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED,
            SubjectAlternativeNameType::EMAIL,
            SubjectAlternativeNameType::URI,
            SubjectAlternativeNameType::OTHER_NAME,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SubjectAlternativeNameType>("SubjectAlternativeNameType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SubjectAlternativeNameType {
}

impl ::std::default::Default for SubjectAlternativeNameType {
    fn default() -> Self {
        SubjectAlternativeNameType::SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for SubjectAlternativeNameType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15sigstore_common.proto\x12\x16dev.sigstore.common.v1\x1a\x1fgoogle/\
    api/field_behavior.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"i\n\nHa\
    shOutput\x12C\n\talgorithm\x18\x01\x20\x01(\x0e2%.dev.sigstore.common.v1\
    .HashAlgorithmR\talgorithm\x12\x16\n\x06digest\x18\x02\x20\x01(\x0cR\x06\
    digest\"\x85\x01\n\x10MessageSignature\x12N\n\x0emessage_digest\x18\x01\
    \x20\x01(\x0b2\".dev.sigstore.common.v1.HashOutputR\rmessageDigestB\x03\
    \xe0A\x02\x12!\n\tsignature\x18\x02\x20\x01(\x0cR\tsignatureB\x03\xe0A\
    \x02\"#\n\x05LogId\x12\x1a\n\x06key_id\x18\x01\x20\x01(\x0cR\x05keyIdB\
    \x03\xe0A\x02\"H\n\x16RFC3161SignedTimestamp\x12.\n\x10signed_timestamp\
    \x18\x01\x20\x01(\x0cR\x0fsignedTimestampB\x03\xe0A\x02\"\xd9\x01\n\tPub\
    licKey\x12\x20\n\traw_bytes\x18\x01\x20\x01(\x0cH\0R\x08rawBytes\x88\x01\
    \x01\x12I\n\x0bkey_details\x18\x02\x20\x01(\x0e2(.dev.sigstore.common.v1\
    .PublicKeyDetailsR\nkeyDetails\x12C\n\tvalid_for\x18\x03\x20\x01(\x0b2!.\
    dev.sigstore.common.v1.TimeRangeH\x01R\x08validFor\x88\x01\x01B\x0c\n\n_\
    raw_bytesB\x0c\n\n_valid_for\")\n\x13PublicKeyIdentifier\x12\x12\n\x04hi\
    nt\x18\x01\x20\x01(\tR\x04hint\"'\n\x10ObjectIdentifier\x12\x13\n\x02id\
    \x18\x01\x20\x03(\x05R\x02idB\x03\xe0A\x02\"m\n\x19ObjectIdentifierValue\
    Pair\x12:\n\x03oid\x18\x01\x20\x01(\x0b2(.dev.sigstore.common.v1.ObjectI\
    dentifierR\x03oid\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\"X\n\
    \x11DistinguishedName\x12\"\n\x0corganization\x18\x01\x20\x01(\tR\x0corg\
    anization\x12\x1f\n\x0bcommon_name\x18\x02\x20\x01(\tR\ncommonName\"3\n\
    \x0fX509Certificate\x12\x20\n\traw_bytes\x18\x01\x20\x01(\x0cR\x08rawByt\
    esB\x03\xe0A\x02\"\x9e\x01\n\x16SubjectAlternativeName\x12F\n\x04type\
    \x18\x01\x20\x01(\x0e22.dev.sigstore.common.v1.SubjectAlternativeNameTyp\
    eR\x04type\x12\x18\n\x06regexp\x18\x02\x20\x01(\tH\0R\x06regexp\x12\x16\
    \n\x05value\x18\x03\x20\x01(\tH\0R\x05valueB\n\n\x08identity\"c\n\x14X50\
    9CertificateChain\x12K\n\x0ccertificates\x18\x01\x20\x03(\x0b2'.dev.sigs\
    tore.common.v1.X509CertificateR\x0ccertificates\"x\n\tTimeRange\x120\n\
    \x05start\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x05start\
    \x121\n\x03end\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampH\0R\
    \x03end\x88\x01\x01B\x06\n\x04_end*=\n\rHashAlgorithm\x12\x1e\n\x1aHASH_\
    ALGORITHM_UNSPECIFIED\x10\0\x12\x0c\n\x08SHA2_256\x10\x01*\xd9\x01\n\x10\
    PublicKeyDetails\x12\"\n\x1ePUBLIC_KEY_DETAILS_UNSPECIFIED\x10\0\x12\x15\
    \n\x11PKCS1_RSA_PKCS1V5\x10\x01\x12\x11\n\rPKCS1_RSA_PSS\x10\x02\x12\x14\
    \n\x10PKIX_RSA_PKCS1V5\x10\x03\x12\x10\n\x0cPKIX_RSA_PSS\x10\x04\x12\x1b\
    \n\x17PKIX_ECDSA_P256_SHA_256\x10\x05\x12\x20\n\x1cPKIX_ECDSA_P256_HMAC_\
    SHA_256\x10\x06\x12\x10\n\x0cPKIX_ED25519\x10\x07*o\n\x1aSubjectAlternat\
    iveNameType\x12-\n)SUBJECT_ALTERNATIVE_NAME_TYPE_UNSPECIFIED\x10\0\x12\t\
    \n\x05EMAIL\x10\x01\x12\x07\n\x03URI\x10\x02\x12\x0e\n\nOTHER_NAME\x10\
    \x03B|\n\x1cdev.sigstore.proto.common.v1B\x0bCommonProtoP\x01Z6github.co\
    m/sigstore/protobuf-specs/gen/pb-go/common/v1\xea\x02\x14Sigstore::Commo\
    n::V1b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
