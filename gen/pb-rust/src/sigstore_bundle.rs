// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `sigstore_bundle.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct TimestampVerificationData {
    // message fields
    pub rfc3161_timestamps: ::protobuf::RepeatedField<super::sigstore_common::RFC3161SignedTimestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimestampVerificationData {
    fn default() -> &'a TimestampVerificationData {
        <TimestampVerificationData as ::protobuf::Message>::default_instance()
    }
}

impl TimestampVerificationData {
    pub fn new() -> TimestampVerificationData {
        ::std::default::Default::default()
    }

    // repeated .dev.sigstore.common.v1.RFC3161SignedTimestamp rfc3161_timestamps = 1;


    pub fn get_rfc3161_timestamps(&self) -> &[super::sigstore_common::RFC3161SignedTimestamp] {
        &self.rfc3161_timestamps
    }
    pub fn clear_rfc3161_timestamps(&mut self) {
        self.rfc3161_timestamps.clear();
    }

    // Param is passed by value, moved
    pub fn set_rfc3161_timestamps(&mut self, v: ::protobuf::RepeatedField<super::sigstore_common::RFC3161SignedTimestamp>) {
        self.rfc3161_timestamps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rfc3161_timestamps(&mut self) -> &mut ::protobuf::RepeatedField<super::sigstore_common::RFC3161SignedTimestamp> {
        &mut self.rfc3161_timestamps
    }

    // Take field
    pub fn take_rfc3161_timestamps(&mut self) -> ::protobuf::RepeatedField<super::sigstore_common::RFC3161SignedTimestamp> {
        ::std::mem::replace(&mut self.rfc3161_timestamps, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TimestampVerificationData {
    fn is_initialized(&self) -> bool {
        for v in &self.rfc3161_timestamps {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rfc3161_timestamps)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rfc3161_timestamps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rfc3161_timestamps {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimestampVerificationData {
        TimestampVerificationData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::sigstore_common::RFC3161SignedTimestamp>>(
                "rfc3161_timestamps",
                |m: &TimestampVerificationData| { &m.rfc3161_timestamps },
                |m: &mut TimestampVerificationData| { &mut m.rfc3161_timestamps },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimestampVerificationData>(
                "TimestampVerificationData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TimestampVerificationData {
        static instance: ::protobuf::rt::LazyV2<TimestampVerificationData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TimestampVerificationData::new)
    }
}

impl ::protobuf::Clear for TimestampVerificationData {
    fn clear(&mut self) {
        self.rfc3161_timestamps.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimestampVerificationData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimestampVerificationData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerificationMaterial {
    // message fields
    pub tlog_entries: ::protobuf::RepeatedField<super::sigstore_rekor::TransparencyLogEntry>,
    pub timestamp_verification_data: ::protobuf::SingularPtrField<TimestampVerificationData>,
    // message oneof groups
    pub content: ::std::option::Option<VerificationMaterial_oneof_content>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerificationMaterial {
    fn default() -> &'a VerificationMaterial {
        <VerificationMaterial as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum VerificationMaterial_oneof_content {
    public_key(super::sigstore_common::PublicKeyIdentifier),
    x509_certificate_chain(super::sigstore_common::X509CertificateChain),
}

impl VerificationMaterial {
    pub fn new() -> VerificationMaterial {
        ::std::default::Default::default()
    }

    // .dev.sigstore.common.v1.PublicKeyIdentifier public_key = 1;


    pub fn get_public_key(&self) -> &super::sigstore_common::PublicKeyIdentifier {
        match self.content {
            ::std::option::Option::Some(VerificationMaterial_oneof_content::public_key(ref v)) => v,
            _ => <super::sigstore_common::PublicKeyIdentifier as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_public_key(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_public_key(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(VerificationMaterial_oneof_content::public_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: super::sigstore_common::PublicKeyIdentifier) {
        self.content = ::std::option::Option::Some(VerificationMaterial_oneof_content::public_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_public_key(&mut self) -> &mut super::sigstore_common::PublicKeyIdentifier {
        if let ::std::option::Option::Some(VerificationMaterial_oneof_content::public_key(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(VerificationMaterial_oneof_content::public_key(super::sigstore_common::PublicKeyIdentifier::new()));
        }
        match self.content {
            ::std::option::Option::Some(VerificationMaterial_oneof_content::public_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_public_key(&mut self) -> super::sigstore_common::PublicKeyIdentifier {
        if self.has_public_key() {
            match self.content.take() {
                ::std::option::Option::Some(VerificationMaterial_oneof_content::public_key(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sigstore_common::PublicKeyIdentifier::new()
        }
    }

    // .dev.sigstore.common.v1.X509CertificateChain x509_certificate_chain = 2;


    pub fn get_x509_certificate_chain(&self) -> &super::sigstore_common::X509CertificateChain {
        match self.content {
            ::std::option::Option::Some(VerificationMaterial_oneof_content::x509_certificate_chain(ref v)) => v,
            _ => <super::sigstore_common::X509CertificateChain as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_x509_certificate_chain(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_x509_certificate_chain(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(VerificationMaterial_oneof_content::x509_certificate_chain(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_x509_certificate_chain(&mut self, v: super::sigstore_common::X509CertificateChain) {
        self.content = ::std::option::Option::Some(VerificationMaterial_oneof_content::x509_certificate_chain(v))
    }

    // Mutable pointer to the field.
    pub fn mut_x509_certificate_chain(&mut self) -> &mut super::sigstore_common::X509CertificateChain {
        if let ::std::option::Option::Some(VerificationMaterial_oneof_content::x509_certificate_chain(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(VerificationMaterial_oneof_content::x509_certificate_chain(super::sigstore_common::X509CertificateChain::new()));
        }
        match self.content {
            ::std::option::Option::Some(VerificationMaterial_oneof_content::x509_certificate_chain(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_x509_certificate_chain(&mut self) -> super::sigstore_common::X509CertificateChain {
        if self.has_x509_certificate_chain() {
            match self.content.take() {
                ::std::option::Option::Some(VerificationMaterial_oneof_content::x509_certificate_chain(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sigstore_common::X509CertificateChain::new()
        }
    }

    // repeated .dev.sigstore.rekor.v1.TransparencyLogEntry tlog_entries = 3;


    pub fn get_tlog_entries(&self) -> &[super::sigstore_rekor::TransparencyLogEntry] {
        &self.tlog_entries
    }
    pub fn clear_tlog_entries(&mut self) {
        self.tlog_entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_tlog_entries(&mut self, v: ::protobuf::RepeatedField<super::sigstore_rekor::TransparencyLogEntry>) {
        self.tlog_entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tlog_entries(&mut self) -> &mut ::protobuf::RepeatedField<super::sigstore_rekor::TransparencyLogEntry> {
        &mut self.tlog_entries
    }

    // Take field
    pub fn take_tlog_entries(&mut self) -> ::protobuf::RepeatedField<super::sigstore_rekor::TransparencyLogEntry> {
        ::std::mem::replace(&mut self.tlog_entries, ::protobuf::RepeatedField::new())
    }

    // .dev.sigstore.bundle.v1.TimestampVerificationData timestamp_verification_data = 4;


    pub fn get_timestamp_verification_data(&self) -> &TimestampVerificationData {
        self.timestamp_verification_data.as_ref().unwrap_or_else(|| <TimestampVerificationData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp_verification_data(&mut self) {
        self.timestamp_verification_data.clear();
    }

    pub fn has_timestamp_verification_data(&self) -> bool {
        self.timestamp_verification_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_verification_data(&mut self, v: TimestampVerificationData) {
        self.timestamp_verification_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp_verification_data(&mut self) -> &mut TimestampVerificationData {
        if self.timestamp_verification_data.is_none() {
            self.timestamp_verification_data.set_default();
        }
        self.timestamp_verification_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp_verification_data(&mut self) -> TimestampVerificationData {
        self.timestamp_verification_data.take().unwrap_or_else(|| TimestampVerificationData::new())
    }
}

impl ::protobuf::Message for VerificationMaterial {
    fn is_initialized(&self) -> bool {
        if let Some(VerificationMaterial_oneof_content::public_key(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(VerificationMaterial_oneof_content::x509_certificate_chain(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.tlog_entries {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timestamp_verification_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(VerificationMaterial_oneof_content::public_key(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(VerificationMaterial_oneof_content::x509_certificate_chain(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tlog_entries)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp_verification_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tlog_entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.timestamp_verification_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &VerificationMaterial_oneof_content::public_key(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &VerificationMaterial_oneof_content::x509_certificate_chain(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tlog_entries {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.timestamp_verification_data.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &VerificationMaterial_oneof_content::public_key(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &VerificationMaterial_oneof_content::x509_certificate_chain(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerificationMaterial {
        VerificationMaterial::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::sigstore_common::PublicKeyIdentifier>(
                "public_key",
                VerificationMaterial::has_public_key,
                VerificationMaterial::get_public_key,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::sigstore_common::X509CertificateChain>(
                "x509_certificate_chain",
                VerificationMaterial::has_x509_certificate_chain,
                VerificationMaterial::get_x509_certificate_chain,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::sigstore_rekor::TransparencyLogEntry>>(
                "tlog_entries",
                |m: &VerificationMaterial| { &m.tlog_entries },
                |m: &mut VerificationMaterial| { &mut m.tlog_entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TimestampVerificationData>>(
                "timestamp_verification_data",
                |m: &VerificationMaterial| { &m.timestamp_verification_data },
                |m: &mut VerificationMaterial| { &mut m.timestamp_verification_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VerificationMaterial>(
                "VerificationMaterial",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VerificationMaterial {
        static instance: ::protobuf::rt::LazyV2<VerificationMaterial> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VerificationMaterial::new)
    }
}

impl ::protobuf::Clear for VerificationMaterial {
    fn clear(&mut self) {
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.tlog_entries.clear();
        self.timestamp_verification_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerificationMaterial {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerificationMaterial {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Bundle {
    // message fields
    pub media_type: ::std::string::String,
    pub verification_material: ::protobuf::SingularPtrField<VerificationMaterial>,
    // message oneof groups
    pub content: ::std::option::Option<Bundle_oneof_content>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Bundle {
    fn default() -> &'a Bundle {
        <Bundle as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Bundle_oneof_content {
    message_signature(super::sigstore_common::MessageSignature),
    dsse_envelope(super::envelope::Envelope),
}

impl Bundle {
    pub fn new() -> Bundle {
        ::std::default::Default::default()
    }

    // string media_type = 1;


    pub fn get_media_type(&self) -> &str {
        &self.media_type
    }
    pub fn clear_media_type(&mut self) {
        self.media_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_media_type(&mut self, v: ::std::string::String) {
        self.media_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_media_type(&mut self) -> &mut ::std::string::String {
        &mut self.media_type
    }

    // Take field
    pub fn take_media_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.media_type, ::std::string::String::new())
    }

    // .dev.sigstore.bundle.v1.VerificationMaterial verification_material = 2;


    pub fn get_verification_material(&self) -> &VerificationMaterial {
        self.verification_material.as_ref().unwrap_or_else(|| <VerificationMaterial as ::protobuf::Message>::default_instance())
    }
    pub fn clear_verification_material(&mut self) {
        self.verification_material.clear();
    }

    pub fn has_verification_material(&self) -> bool {
        self.verification_material.is_some()
    }

    // Param is passed by value, moved
    pub fn set_verification_material(&mut self, v: VerificationMaterial) {
        self.verification_material = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_verification_material(&mut self) -> &mut VerificationMaterial {
        if self.verification_material.is_none() {
            self.verification_material.set_default();
        }
        self.verification_material.as_mut().unwrap()
    }

    // Take field
    pub fn take_verification_material(&mut self) -> VerificationMaterial {
        self.verification_material.take().unwrap_or_else(|| VerificationMaterial::new())
    }

    // .dev.sigstore.common.v1.MessageSignature message_signature = 3;


    pub fn get_message_signature(&self) -> &super::sigstore_common::MessageSignature {
        match self.content {
            ::std::option::Option::Some(Bundle_oneof_content::message_signature(ref v)) => v,
            _ => <super::sigstore_common::MessageSignature as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_message_signature(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_message_signature(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(Bundle_oneof_content::message_signature(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_message_signature(&mut self, v: super::sigstore_common::MessageSignature) {
        self.content = ::std::option::Option::Some(Bundle_oneof_content::message_signature(v))
    }

    // Mutable pointer to the field.
    pub fn mut_message_signature(&mut self) -> &mut super::sigstore_common::MessageSignature {
        if let ::std::option::Option::Some(Bundle_oneof_content::message_signature(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(Bundle_oneof_content::message_signature(super::sigstore_common::MessageSignature::new()));
        }
        match self.content {
            ::std::option::Option::Some(Bundle_oneof_content::message_signature(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_message_signature(&mut self) -> super::sigstore_common::MessageSignature {
        if self.has_message_signature() {
            match self.content.take() {
                ::std::option::Option::Some(Bundle_oneof_content::message_signature(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sigstore_common::MessageSignature::new()
        }
    }

    // .io.intoto.Envelope dsse_envelope = 4;


    pub fn get_dsse_envelope(&self) -> &super::envelope::Envelope {
        match self.content {
            ::std::option::Option::Some(Bundle_oneof_content::dsse_envelope(ref v)) => v,
            _ => <super::envelope::Envelope as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_dsse_envelope(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_dsse_envelope(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(Bundle_oneof_content::dsse_envelope(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dsse_envelope(&mut self, v: super::envelope::Envelope) {
        self.content = ::std::option::Option::Some(Bundle_oneof_content::dsse_envelope(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dsse_envelope(&mut self) -> &mut super::envelope::Envelope {
        if let ::std::option::Option::Some(Bundle_oneof_content::dsse_envelope(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(Bundle_oneof_content::dsse_envelope(super::envelope::Envelope::new()));
        }
        match self.content {
            ::std::option::Option::Some(Bundle_oneof_content::dsse_envelope(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dsse_envelope(&mut self) -> super::envelope::Envelope {
        if self.has_dsse_envelope() {
            match self.content.take() {
                ::std::option::Option::Some(Bundle_oneof_content::dsse_envelope(v)) => v,
                _ => panic!(),
            }
        } else {
            super::envelope::Envelope::new()
        }
    }
}

impl ::protobuf::Message for Bundle {
    fn is_initialized(&self) -> bool {
        for v in &self.verification_material {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Bundle_oneof_content::message_signature(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Bundle_oneof_content::dsse_envelope(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.media_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.verification_material)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(Bundle_oneof_content::message_signature(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(Bundle_oneof_content::dsse_envelope(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.media_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.media_type);
        }
        if let Some(ref v) = self.verification_material.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &Bundle_oneof_content::message_signature(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Bundle_oneof_content::dsse_envelope(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.media_type.is_empty() {
            os.write_string(1, &self.media_type)?;
        }
        if let Some(ref v) = self.verification_material.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &Bundle_oneof_content::message_signature(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Bundle_oneof_content::dsse_envelope(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Bundle {
        Bundle::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "media_type",
                |m: &Bundle| { &m.media_type },
                |m: &mut Bundle| { &mut m.media_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VerificationMaterial>>(
                "verification_material",
                |m: &Bundle| { &m.verification_material },
                |m: &mut Bundle| { &mut m.verification_material },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::sigstore_common::MessageSignature>(
                "message_signature",
                Bundle::has_message_signature,
                Bundle::get_message_signature,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::envelope::Envelope>(
                "dsse_envelope",
                Bundle::has_dsse_envelope,
                Bundle::get_dsse_envelope,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Bundle>(
                "Bundle",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Bundle {
        static instance: ::protobuf::rt::LazyV2<Bundle> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Bundle::new)
    }
}

impl ::protobuf::Clear for Bundle {
    fn clear(&mut self) {
        self.media_type.clear();
        self.verification_material.clear();
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Bundle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bundle {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15sigstore_bundle.proto\x12\x16dev.sigstore.bundle.v1\x1a\x1fgoogle/\
    api/field_behavior.proto\x1a\x0eenvelope.proto\x1a\x15sigstore_common.pr\
    oto\x1a\x14sigstore_rekor.proto\"z\n\x19TimestampVerificationData\x12]\n\
    \x12rfc3161_timestamps\x18\x01\x20\x03(\x0b2..dev.sigstore.common.v1.RFC\
    3161SignedTimestampR\x11rfc3161Timestamps\"\xa2\x03\n\x14VerificationMat\
    erial\x12Q\n\npublic_key\x18\x01\x20\x01(\x0b2+.dev.sigstore.common.v1.P\
    ublicKeyIdentifierH\0R\tpublicKeyB\x03\xe0A\x02\x12i\n\x16x509_certifica\
    te_chain\x18\x02\x20\x01(\x0b2,.dev.sigstore.common.v1.X509CertificateCh\
    ainH\0R\x14x509CertificateChainB\x03\xe0A\x02\x12N\n\x0ctlog_entries\x18\
    \x03\x20\x03(\x0b2+.dev.sigstore.rekor.v1.TransparencyLogEntryR\x0btlogE\
    ntries\x12q\n\x1btimestamp_verification_data\x18\x04\x20\x01(\x0b21.dev.\
    sigstore.bundle.v1.TimestampVerificationDataR\x19timestampVerificationDa\
    taB\t\n\x07content\"\xbf\x02\n\x06Bundle\x12\x1d\n\nmedia_type\x18\x01\
    \x20\x01(\tR\tmediaType\x12f\n\x15verification_material\x18\x02\x20\x01(\
    \x0b2,.dev.sigstore.bundle.v1.VerificationMaterialR\x14verificationMater\
    ialB\x03\xe0A\x02\x12\\\n\x11message_signature\x18\x03\x20\x01(\x0b2(.de\
    v.sigstore.common.v1.MessageSignatureH\0R\x10messageSignatureB\x03\xe0A\
    \x02\x12?\n\rdsse_envelope\x18\x04\x20\x01(\x0b2\x13.io.intoto.EnvelopeH\
    \0R\x0cdsseEnvelopeB\x03\xe0A\x02B\t\n\x07contentJ\x04\x08\x05\x103B|\n\
    \x1cdev.sigstore.proto.bundle.v1B\x0bBundleProtoP\x01Z6github.com/sigsto\
    re/protobuf-specs/gen/pb-go/bundle/v1\xea\x02\x14Sigstore::Bundle::V1b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
