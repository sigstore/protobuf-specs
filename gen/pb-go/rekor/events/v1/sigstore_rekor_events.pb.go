// Copyright 2023 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: sigstore_rekor_events.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NewEntry defines the CloudEvents (https://cloudevents.io/) message that
// is published when a new entry is added to Rekor. Adheres to the v1.0.2 schema
// defined in https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/cloudevents.json.
type NewEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CloudEvents specification version.
	SpecVersion string `protobuf:"bytes,1,opt,name=spec_version,json=specversion,proto3" json:"spec_version,omitempty"`
	// The unique id of the entry in the log.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The JSON-encoded dev.sigstore.rekor.v1.TransparencyLogEntry message.
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// The type of the encoded data. Must be "application/json".
	DataType string `protobuf:"bytes,4,opt,name=data_type,json=datacontenttype,proto3" json:"data_type,omitempty"`
	// The type of the message. Must be "dev.sigstore.rekor.events.v1.NewEntry".
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The source of the event.
	Source string `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// The kind (aka type) of the entry. Must match the value in the
	// dev.sigstore.rekor.v1.TransparencyLogEntry.KindVersion.kind field.
	EntryKind string `protobuf:"bytes,7,opt,name=entry_kind,json=rekor_entry_kind,proto3" json:"entry_kind,omitempty"`
	// The subject identifiers for the entities that signed the artifact
	// uploaded to Rekor. This field may not be set if the entry_kind is not a
	// format that supports this type of metadata.
	Subjects []string `protobuf:"bytes,8,rep,name=subjects,json=rekor_signing_subjects,proto3" json:"subjects,omitempty"`
	// The timestamp that the entry was added to the log. Should match the
	// value in dev.sigstore.rekor.v1.TransparencyLogEntry.integrated_time.
	Time *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *NewEntry) Reset() {
	*x = NewEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sigstore_rekor_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEntry) ProtoMessage() {}

func (x *NewEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEntry.ProtoReflect.Descriptor instead.
func (*NewEntry) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_events_proto_rawDescGZIP(), []int{0}
}

func (x *NewEntry) GetSpecVersion() string {
	if x != nil {
		return x.SpecVersion
	}
	return ""
}

func (x *NewEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewEntry) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *NewEntry) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *NewEntry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NewEntry) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NewEntry) GetEntryKind() string {
	if x != nil {
		return x.EntryKind
	}
	return ""
}

func (x *NewEntry) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *NewEntry) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_sigstore_rekor_events_proto protoreflect.FileDescriptor

var file_sigstore_rekor_events_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6b, 0x6f, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f,
	0x72, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x02,
	0x0a, 0x08, 0x4e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65,
	0x6b, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x76, 0x0a, 0x22, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x52, 0x65, 0x6b, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x6b,
	0x6f, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sigstore_rekor_events_proto_rawDescOnce sync.Once
	file_sigstore_rekor_events_proto_rawDescData = file_sigstore_rekor_events_proto_rawDesc
)

func file_sigstore_rekor_events_proto_rawDescGZIP() []byte {
	file_sigstore_rekor_events_proto_rawDescOnce.Do(func() {
		file_sigstore_rekor_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_sigstore_rekor_events_proto_rawDescData)
	})
	return file_sigstore_rekor_events_proto_rawDescData
}

var file_sigstore_rekor_events_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_sigstore_rekor_events_proto_goTypes = []interface{}{
	(*NewEntry)(nil),              // 0: dev.sigstore.rekor.events.v1.NewEntry
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_sigstore_rekor_events_proto_depIdxs = []int32{
	1, // 0: dev.sigstore.rekor.events.v1.NewEntry.time:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sigstore_rekor_events_proto_init() }
func file_sigstore_rekor_events_proto_init() {
	if File_sigstore_rekor_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sigstore_rekor_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sigstore_rekor_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sigstore_rekor_events_proto_goTypes,
		DependencyIndexes: file_sigstore_rekor_events_proto_depIdxs,
		MessageInfos:      file_sigstore_rekor_events_proto_msgTypes,
	}.Build()
	File_sigstore_rekor_events_proto = out.File
	file_sigstore_rekor_events_proto_rawDesc = nil
	file_sigstore_rekor_events_proto_goTypes = nil
	file_sigstore_rekor_events_proto_depIdxs = nil
}
